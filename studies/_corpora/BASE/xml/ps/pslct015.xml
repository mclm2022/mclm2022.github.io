<?xml version="1.0"?>
<!DOCTYPE TEI.2 SYSTEM "base.dtd">
<TEI.2><teiHeader>	
<fileDesc>
<titleStmt>
<title>Optimal Control</title></titleStmt>
<publicationStmt><distributor>BASE and Oxford Text Archive</distributor>
<idno>pslct015</idno>	
<availability><p>The British Academic Spoken English (BASE) corpus was developed at the
Universities of Warwick and Reading, under the directorship of Hilary Nesi
(Centre for English Language Teacher Education, Warwick) and Paul Thompson
(Department of Applied Linguistics, Reading), with funding from BALEAP,
EURALEX, the British Academy and the Arts and Humanities Research Board. The
original recordings are held at the Universities of Warwick and Reading, and
at the Oxford Text Archive and may be consulted by bona fide researchers
upon written application to any of the holding bodies.
The BASE corpus is freely available to researchers who agree to the
following conditions:</p>
<p>1. The recordings and transcriptions should not be modified in any
way</p>
<p>2. The recordings and transcriptions should be used for research purposes
only; they should not be reproduced in teaching materials</p>
<p>3. The recordings and transcriptions should not be reproduced in full for
a wider audience/readership, although researchers are free to quote short
passages of text (up to 200 running words from any given speech event)</p>
<p>4. The corpus developers should be informed of all presentations or
publications arising from analysis of the corpus</p><p>
Researchers should acknowledge their use of the corpus using the following
form of words:
The recordings and transcriptions used in this study come from the British
Academic Spoken English (BASE) corpus, which was developed at the
Universities of Warwick and Reading under the directorship of Hilary Nesi
(Warwick) and Paul Thompson (Reading). Corpus development was assisted by
funding from the Universities of Warwick and Reading, BALEAP, EURALEX, the
British Academy and the Arts and Humanities Research Board. </p></availability>
</publicationStmt>
<sourceDesc>
<recordingStmt>
<recording dur="00:50:40" n="5906">
<date>30/11/1998</date><equipment><p>video</p></equipment>
<respStmt><name>BASE team</name>
</respStmt></recording></recordingStmt></sourceDesc></fileDesc>
<profileDesc>
<langUsage><language id="en">English</language>
</langUsage>
<particDesc>
<person id="nm0765" role="main speaker" n="n" sex="m"><p>nm0765, main speaker, non-student, male</p></person>
<person id="sf0766" role="participant" n="s" sex="f"><p>sf0766, participant, student, female</p></person>
<person id="sf0767" role="participant" n="s" sex="f"><p>sf0767, participant, student, female</p></person>
<person id="sf0768" role="participant" n="s" sex="f"><p>sf0768, participant, student, female</p></person>
<person id="sf0769" role="participant" n="s" sex="f"><p>sf0769, participant, student, female</p></person>
<person id="sm0770" role="participant" n="s" sex="m"><p>sm0770, participant, student, male</p></person>
<person id="sf0771" role="participant" n="s" sex="f"><p>sf0771, participant, student, female</p></person>
<person id="sf0772" role="participant" n="s" sex="f"><p>sf0772, participant, student, female</p></person>
<person id="sm0773" role="participant" n="s" sex="m"><p>sm0773, participant, student, male</p></person>
<person id="om0774" role="observer" n="o" sex="m"><p>om0774, observer, observer, male</p></person>
<personGrp id="ss" role="audience" size="m"><p>ss, audience, medium group </p></personGrp>
<personGrp id="sl" role="all" size="m"><p>sl, all, medium group</p></personGrp>
<personGrp role="speakers" size="12"><p>number of speakers: 12</p></personGrp>
</particDesc>
<textClass>
<keywords>
<list>
<item n="speechevent">Lecture</item>
<item n="acaddept">Economics</item>
<item n="acaddiv">ps</item>
<item n="partlevel">unknown</item>
<item n="module">unknown</item>
</list></keywords>
</textClass> 
</profileDesc></teiHeader><text><body>
<u who="nm0765"> # <pause dur="0.5"/> so where we were last time <pause dur="0.4"/> is we had # <pause dur="0.8"/> written down a likelihood that we wanted to maximize <pause dur="0.8"/> and <pause dur="0.3"/> then we'd written down the first order condition so let's write remember the likelihood <pause dur="1.5"/><kinesic desc="writes on board" iterated="y" dur="17"/> the likelihood <unclear>went like</unclear> # <pause dur="0.4"/> the Lagrangian sorry went like this <pause dur="11.0"/> that was the <pause dur="0.9"/><kinesic desc="indicates point on board" iterated="n"/> flow element of it <pause dur="1.4"/> and # <pause dur="2.0"/><kinesic desc="writes on board" iterated="y" dur="16"/> there we had this extra stuff <pause dur="13.5"/> that came from the <pause dur="0.6"/> end conditions <pause dur="0.8"/> now <pause dur="2.3"/> we <pause dur="0.3"/> realized that <kinesic desc="indicates point on board" iterated="n"/> this Lagrangian didn't contain terms in the X-prime term <pause dur="0.5"/> so this was a separable maximization <pause dur="0.3"/> and all we needed to do <pause dur="0.3"/> to maximize this <trunc>lagra</trunc> Lagrangian <pause dur="0.6"/> was to differentiate it <pause dur="0.2"/> at each time into T <pause dur="0.2"/> and set those derivatives equal to zero <pause dur="0.8"/> and if we did that <pause dur="1.3"/><kinesic desc="indicates point on board" iterated="n"/> what we got from in here <pause dur="0.9"/> was <pause dur="0.5"/><kinesic desc="writes on board" iterated="y" dur="13"/> D-F-<pause dur="0.3"/>by-D-X <pause dur="0.3"/> plus lambda-D-G-<pause dur="0.9"/>by-D-X <pause dur="0.3"/> is equal to <pause dur="0.3"/> minus-lambda-prime <pause dur="0.4"/> at all times little-T <pause dur="1.5"/> okay <pause dur="1.4"/> and that's just differentiating <kinesic desc="indicates point on board" iterated="n"/> this expression <pause dur="0.3"/> with respect to X <pause dur="0.9"/> so that it's maximizing this term in the integral <pause dur="0.3"/> at each time 
little-T <pause dur="0.3"/> with respect to X <pause dur="0.8"/> and the other condition we had <pause dur="0.3"/><kinesic desc="writes on board" iterated="y" dur="9"/> was D-F-by-D-U <pause dur="0.5"/> plus lambda-D-G-<pause dur="0.5"/>by-D-U <pause dur="0.5"/> was equal to zero <pause dur="0.6"/> at all times little-T <pause dur="0.6"/> and that was again differentiating <kinesic desc="indicates point on board" iterated="n"/> this point <pause dur="0.4"/> thing in the integral here <pause dur="0.4"/> with respect to U <pause dur="0.2"/> at all times little-T <pause dur="0.6"/> so we're maximizing <kinesic desc="indicates point on board" iterated="n"/> this <pause dur="0.2"/> with respect to U <pause dur="1.6"/> now <kinesic desc="indicates point on board" iterated="n"/> these two conditions have a special name they're called the <pause dur="0.4"/> <kinesic desc="writes on board" iterated="y" dur="6"/> Hamiltonian conditions <pause dur="4.9"/> and # <pause dur="0.3"/> the reason they're called the Hamiltonian conditions <trunc>a</trunc> are apart from being named after a man called Hamilton <pause dur="0.5"/> is that they # <pause dur="0.9"/> <trunc>sta</trunc> are basically derivatives <pause dur="0.2"/> of the function <pause dur="0.5"/><kinesic desc="writes on board" iterated="y" dur="2"/> F plus <pause dur="0.4"/> lambda times G <pause dur="0.6"/> with respect to X <kinesic desc="indicates point on board" iterated="n"/> here <pause dur="0.2"/> and with respect to <kinesic desc="indicates point on board" iterated="n"/> U here <pause dur="1.2"/> so we <kinesic desc="writes on board" iterated="y" dur="1"/> think of the function H which is F plus lambda times G <pause dur="2.1"/> as <pause dur="0.5"/> the thing that's being differentiated on the left-hand side <pause dur="1.8"/> now <pause dur="0.6"/> so these are like first order conditions if we wanted to maximize something <pause dur="0.2"/> we'd take <kinesic desc="indicates board" iterated="n"/> these first order conditions 
and solve them <pause dur="0.7"/> but there's other things here <kinesic desc="indicates point on board" iterated="n"/><pause dur="0.9"/> that we also need to worry about <pause dur="1.0"/> the other things here that we need to worry about <pause dur="0.7"/> come from <pause dur="0.2"/> differentiating <kinesic desc="indicates point on board" iterated="n"/> this Lagrangian <pause dur="0.7"/> at the terminal time <pause dur="1.1"/> you see <pause dur="1.2"/><kinesic desc="indicates point on board" iterated="n"/> X at time T <pause dur="0.2"/> appears here <kinesic desc="indicates point on board" iterated="n"/><pause dur="0.4"/> then it appears here <pause dur="0.7"/> so if we differentiate <pause dur="0.2"/> the Lagrangian <pause dur="1.0"/><kinesic desc="writes on board" iterated="y" dur="4"/> with respect to X <pause dur="0.2"/> at time T <pause dur="0.5"/> we don't get an expression <kinesic desc="indicates point on board" iterated="n"/> like this or an expression like this <pause dur="0.6"/><kinesic desc="indicates point on board" iterated="n"/> we get <pause dur="1.6"/><kinesic desc="writes on board" iterated="y" dur="4"/> mu <pause dur="0.5"/> minus <pause dur="0.4"/> lambda at T <pause dur="2.1"/> and that's <pause dur="0.5"/> actually written right at the bottom of <pause dur="0.2"/><kinesic desc="indicates point on notes" iterated="n"/> of page two of your notes <pause dur="0.9"/> now <pause dur="0.3"/> and this has got to equal zero <pause dur="1.7"/><kinesic desc="writes on board" iterated="y" dur="1"/> now where did this <pause dur="0.9"/><kinesic desc="indicates point on board" iterated="n"/> bit of the <pause dur="1.0"/> Lagrangian come from <pause dur="0.3"/> this bit of the Lagrangian <pause dur="0.3"/> came from the terminal constraint <pause dur="0.4"/> by our state variable <pause dur="0.8"/> we had a <kinesic desc="writes on board" iterated="y" dur="2"/> <trunc>ke</trunc> terminal constraint which said that <pause dur="0.3"/> X at time T <pause dur="0.2"/> had to be greater than or equal to some number <pause dur="0.3"/> X-nought <pause dur="1.9"/> and <kinesic desc="indicates point on board" iterated="n"/> this lambda at time T and this <kinesic desc="indicates point on board" iterated="n"/> mu at time T <pause dur="0.3"/> are two Lagrange multipliers for X at time T <pause dur="0.8"/> mu is the Lagrange multiplier <pause dur="0.2"/> that 
applies <kinesic desc="indicates point on board" iterated="n"/> this constraint <pause dur="0.5"/> lambda at T <pause dur="0.4"/> is the costate variable <pause dur="1.4"/> so this <pause dur="0.4"/><kinesic desc="indicates point on board" iterated="n"/> condition here gives you a link between the two <pause dur="7.6"/> so <pause dur="0.2"/> i think probably the best thing to do now <pause dur="0.5"/> is to use <kinesic desc="indicates board" iterated="n"/> these conditions to solve a particular problem <pause dur="0.8"/> so <pause dur="1.2"/> let's <pause dur="0.4"/> forget <pause dur="1.3"/><kinesic desc="writes on board" iterated="y" dur="4"/><kinesic desc="indicates section of board" iterated="n"/> this stuff <pause dur="2.4"/><kinesic desc="indicates point on board" iterated="n"/> the stuff up there <pause dur="0.6"/> and use the first order conditions <pause dur="0.2"/> to solve a particular problem so you can see how they work in practice <pause dur="1.0"/> so what i'm going to do is i'm going to take <kinesic desc="indicates point on board" iterated="n"/> this stuff <pause dur="0.2"/> and put it up there <kinesic desc="indicates point on board" iterated="n"/> and then i'm going to solve the problem <kinesic desc="indicates point on board" iterated="n"/> over here and you'll be able to see <pause dur="0.2"/> how they relate one to the other <pause dur="0.5"/> so first of all i've got to be able to rub the blackboard off <pause dur="1.8"/><event desc="looks for board rubber" iterated="y" dur="3"/> excuse me <pause dur="2.4"/> right <pause dur="1.0"/> so let's get rid of that <pause dur="1.8"/><event desc="wipes board" iterated="y" dur="9"/> and get rid of that <pause dur="0.2"/> and we can get rid of that too <pause dur="2.3"/> we'll leave the rest <pause dur="0.2"/> up <pause dur="1.8"/> now <pause dur="3.2"/> the example i give you is on page three of the notes <pause dur="0.5"/> and the example is one of a <pause dur="0.9"/> a consumer trying to maximize their 
lifetime's utility <pause dur="0.9"/> so what's the problem <pause dur="0.6"/><kinesic desc="writes on board" iterated="y" dur="2"/> the <pause dur="0.2"/> the problem we face <pause dur="0.8"/> is for a consumer who lives <pause dur="0.5"/><kinesic desc="writes on board" iterated="y" dur="2"/> from time period zero up to time period capital <trunc>titl</trunc> capital-T <pause dur="0.8"/> whose <pause dur="0.2"/> utility <pause dur="1.1"/> is the <pause dur="0.4"/><kinesic desc="writes on board" iterated="y" dur="7"/> logarithm <pause dur="0.6"/> of their consumption level <pause dur="0.5"/> at time T <pause dur="2.7"/> and # <pause dur="1.8"/> they want to <kinesic desc="writes on board" iterated="y" dur="1"/> maximize this <pause dur="2.8"/> by choosing a <kinesic desc="writes on board" iterated="y" dur="1"/> path of consumption <pause dur="1.9"/> and their their ability to do this is constrained in certain ways <pause dur="0.9"/> well they start off <pause dur="0.2"/> their lives <pause dur="0.4"/><kinesic desc="writes on board" iterated="y" dur="3"/> with # a level of saving <pause dur="1.4"/> say # ooh now they've got to have some positive saving <pause dur="0.5"/> so let's call it <pause dur="1.3"/><kinesic desc="writes on board" iterated="y" dur="1"/> some level S-zero <pause dur="1.1"/> and # <pause dur="0.6"/> they also have a constraint on their <pause dur="0.4"/> the way in which saving <pause dur="1.7"/> changes through time <pause dur="0.5"/> so <pause dur="0.2"/> saving <kinesic desc="writes on board" iterated="y" dur="2"/> changes through time <pause dur="0.3"/> that's <pause dur="0.2"/> we look at the derivative of S at T <pause dur="0.8"/><kinesic desc="writes on board" iterated="y" dur="3"/> saving's 
going to go up <pause dur="2.5"/> if we get <pause dur="0.2"/> income from our current stock of saving so this is <pause dur="0.3"/> the rate of interest on our current stock of saving <pause dur="0.6"/> and saving's going to go <kinesic desc="writes on board" iterated="y" dur="2"/> down <pause dur="1.2"/> if we eat some of our saving <pause dur="0.8"/> right <pause dur="1.9"/> so we're going to maximize our lifetime's utility <pause dur="0.5"/> given <kinesic desc="indicates point on board" iterated="n"/> we start off with this <pause dur="0.3"/> fixed level of saving <pause dur="0.5"/><kinesic desc="indicates point on board" iterated="n"/> given saving evolves in this way <pause dur="0.3"/> and the final condition we have to have is we have to have <pause dur="1.1"/><kinesic desc="writes on board" iterated="y" dur="3"/> we die <pause dur="0.6"/> not owning money <pause dur="1.4"/> right <pause dur="3.0"/> right <pause dur="0.7"/> so <kinesic desc="indicates point on board" iterated="n"/> this is a maximization problem <pause dur="0.5"/> how are we going to apply <kinesic desc="indicates point on board" iterated="n"/> these conditions <pause dur="0.2"/> to <kinesic desc="indicates point on board" iterated="n"/> this maximization problem <pause dur="1.3"/> well what we want to do <pause dur="0.2"/> is we want to think about what is a function F what is our function G here <pause dur="1.9"/> so let's do that first of all <pause dur="1.5"/><kinesic desc="writes on board" iterated="y" dur="10"/> F <pause dur="0.6"/> at time T <pause dur="1.7"/> # it's an F let's just call it F <pause dur="0.9"/> is <pause dur="0.8"/> a logarithm <pause dur="0.7"/> of your consumptions <pause dur="0.4"/> at time T <pause dur="1.2"/> G <pause dur="0.4"/><kinesic desc="writes on board" iterated="y" dur="1"/> 
in this particular case <pause dur="1.1"/> it's the stuff <pause dur="0.8"/><kinesic desc="writes on board" iterated="y" dur="1"/><kinesic desc="indicates point on board" iterated="n"/> here <pause dur="0.3"/> whatever that is <pause dur="1.0"/><kinesic desc="writes on board" iterated="y" dur="4"/> in this case it's <pause dur="0.4"/> R of S-T <pause dur="0.6"/> minus C of T <pause dur="2.1"/> and that's it <pause dur="2.6"/> so these <pause dur="0.3"/><kinesic desc="writes on board" iterated="y" dur="1"/><kinesic desc="indicates point on board" iterated="n"/> this is the thing you want to maximize <pause dur="0.4"/><kinesic desc="writes on board" iterated="y" dur="1"/><kinesic desc="indicates point on board" iterated="n"/> this is the thing <pause dur="0.9"/> on the other side of the savings <pause dur="0.5"/> equation <pause dur="0.4"/><kinesic desc="indicates point on board" iterated="n"/> this is how savings change through time <pause dur="1.1"/> G was the constraint on the rate of change in savings <pause dur="1.0"/> clear <pause dur="5.0"/><kinesic desc="makes questioning gesture" iterated="n"/> clear </u><pause dur="0.3"/> <u who="sf0766" trans="pause"> mm </u><pause dur="0.2"/> <u who="nm0765" trans="pause"> jolly good <pause dur="1.0"/> so <pause dur="2.2"/> # <pause dur="0.8"/> how are you going to do this <pause dur="0.5"/> well <pause dur="0.3"/> let's do it in two stages <kinesic desc="writes on board" iterated="y" dur="1"/> first of all <pause dur="0.3"/> let's write down a Hamiltonian for this <pause dur="0.2"/> problem <pause dur="0.5"/> so it's the <kinesic desc="writes on board" iterated="y" dur="1"/> logarithm <pause dur="0.2"/> of C <pause dur="1.5"/><kinesic desc="writes on board" iterated="y" dur="4"/> plus <pause dur="0.3"/> lambda <pause dur="0.5"/> times R of S <pause dur="0.2"/> minus C <pause dur="2.9"/><kinesic desc="indicates point on board" iterated="n"/> that's <pause dur="0.5"/> the # G bit <pause dur="0.2"/><kinesic desc="indicates point on board" iterated="n"/> that's the F bit <pause dur="2.2"/> now <kinesic desc="indicates point on board" iterated="n"/> these conditions tell us how to solve the problem now <pause dur="0.2"/> first 
of all <pause dur="0.3"/> we have to do <pause dur="0.6"/><kinesic desc="writes on board" iterated="y" dur="2"/> D-H-<pause dur="0.9"/>by-<pause dur="0.5"/>D-X now at where X is the state variable <pause dur="0.9"/> okay so let's pick someone <gap reason="name" extent="1 word"/> <pause dur="0.3"/> what's the state variable in this problem <pause dur="1.4"/> what's the okay <pause dur="0.2"/> what's the thing we can't choose </u><pause dur="1.9"/> <u who="sf0767" trans="pause"> consumption <pause dur="1.3"/> <vocal desc="laughter" iterated="y" n="nm0765" dur="1"/> <gap reason="inaudible" extent="1 sec"/> saving </u><u who="nm0765" trans="overlap"> really </u><u who="sf0767" trans="overlap"> <gap reason="inaudible" extent="1 sec"/> and stuff </u><u who="nm0765" trans="latching"> really consumption's the thing we're choosing for C for control </u><u who="sf0767" trans="latching"> it's probably saving <gap reason="inaudible" extent="1 sec"/></u><u who="nm0765" trans="overlap"> okay S for state very good <pause dur="0.6"/> so the thing we'd <pause dur="0.3"/> we can't control the state variable is S <pause dur="0.7"/> so <pause dur="0.6"/> in <kinesic desc="indicates point on board" iterated="n"/><kinesic desc="writes on board" iterated="y" dur="1"/> this case the state variable we call saving <pause dur="0.4"/> so you're going to have to <kinesic desc="writes on board" iterated="y" dur="5"/> do D-H-by-D-S <pause dur="0.9"/> is equal to <pause dur="0.7"/> minus-<pause dur="0.2"/>lambda-prime <pause dur="1.8"/><kinesic desc="indicates point on board" iterated="n"/> this one says <pause dur="0.6"/><kinesic desc="writes on board" iterated="y" dur="6"/> D-H <pause dur="0.7"/> by the control variable which is consumption <pause dur="1.5"/> is 
equal to zero <pause dur="1.2"/> and so we <kinesic desc="writes on board" iterated="y" dur="2"/><kinesic desc="indicates section of board" iterated="n"/>need to take <pause dur="0.5"/> these two equations <pause dur="2.5"/> and now <pause dur="0.3"/> i can rub that stuff off <pause dur="2.7"/><event desc="wipes board" iterated="y" dur="4"/> and come over here <pause dur="3.1"/><kinesic desc="writes on board" iterated="y" dur="1"/> and <pause dur="0.2"/> fill these in in more detail what is <pause dur="0.4"/> H differentiated with respect to S <pause dur="0.6"/> well <pause dur="0.4"/> S isn't <kinesic desc="indicates point on board" iterated="n"/> here but it's it's just this this is just the C <pause dur="0.2"/> S only appears <kinesic desc="writes on board" iterated="n"/><kinesic desc="indicates point on board" iterated="n"/> here in the H equation <pause dur="0.6"/> so <pause dur="0.2"/><kinesic desc="writes on board" iterated="y" dur="4"/> D-H-<pause dur="0.4"/>by-D-S <pause dur="2.6"/> is actually <pause dur="0.3"/> lambda times C R sorry <pause dur="1.5"/><kinesic desc="writes on board" iterated="y" dur="8"/> and that's got to equal minus-lambda-prime <pause dur="2.0"/> D-H-by-D-C <pause dur="0.6"/> i know you like differentiating logarithms <pause dur="0.4"/> so <pause dur="0.2"/> you've got to differentiate <kinesic desc="indicates point on board" iterated="n"/> this logarithm with respect to C <pause dur="1.5"/><kinesic desc="writes on board" iterated="y" dur="1"/> one-over-C <pause dur="0.8"/> and <pause dur="0.3"/><kinesic desc="indicates point on board" iterated="n"/> there's a C term here so we can have <pause dur="0.3"/><kinesic desc="writes on board" iterated="y" dur="1"/> minus-lambda <pause dur="1.3"/> and that equals <pause dur="0.7"/><kinesic desc="writes on board" iterated="y" dur="1"/> 
zero <pause dur="3.8"/> yes <pause dur="1.1"/> thanks <pause dur="0.6"/> so <pause dur="2.3"/> we've got these <kinesic desc="writes on board" iterated="y" dur="2"/><kinesic desc="indicates point on board" iterated="n"/> two equations <pause dur="0.6"/> that come from <pause dur="0.5"/> the Hamiltonian condition but we also know one other thing <pause dur="0.9"/> the other thing we know <pause dur="0.4"/> is <kinesic desc="writes on board" iterated="y" dur="1"/> how saving evolves through time <pause dur="0.4"/> so let's <pause dur="0.4"/> not lose that <pause dur="1.1"/><kinesic desc="writes on board" iterated="y" dur="5"/> S-prime of T <pause dur="0.4"/> is equal to R-S <pause dur="0.2"/> minus C <pause dur="3.7"/> we've got three equations <pause dur="1.7"/> now i'm going to rub <kinesic desc="indicates point on board" iterated="n"/> this off <pause dur="6.4"/><event desc="wipes board" iterated="y" dur="4"/> and let's see what we've got <pause dur="0.5"/> well the first thing we have <pause dur="0.4"/><kinesic desc="writes on board" iterated="y" dur="6"/> is that <pause dur="0.3"/> we have a differential equation <pause dur="2.3"/> for the costate variable <pause dur="2.4"/> costate variable <pause dur="0.5"/> is <pause dur="0.4"/><kinesic desc="writes on board" iterated="y" dur="1"/> comes straight from that <kinesic desc="indicates point on board" iterated="n"/><pause dur="1.3"/> the second thing we have is we have a relationship <pause dur="1.2"/><kinesic desc="writes on board" iterated="y" dur="5"/> between a costate variable <pause dur="1.1"/> and consumption <pause dur="0.6"/> at time T <pause dur="1.4"/> and the final thing we have is we have a relationship between saving <pause dur="1.0"/><kinesic desc="writes on board" iterated="y" dur="7"/> a differential equation for saving <pause dur="1.0"/> and consumption <pause dur="3.5"/> okay <pause dur="1.9"/> so <pause dur="0.2"/> once we've 
solved <kinesic desc="indicates point on board" iterated="n"/> these <pause dur="0.3"/> three <pause dur="0.2"/> equations for the path of the costate variable <pause dur="0.4"/> the path of consumption <pause dur="0.3"/> and the path of saving <pause dur="0.7"/> then we will have found <pause dur="0.9"/> the optimal <pause dur="0.8"/> path for consumption <pause dur="0.4"/> in <kinesic desc="indicates point on board" iterated="n"/> this problem <pause dur="0.4"/> and the consequent optimal path for saving <pause dur="1.4"/> okay <pause dur="0.7"/> there are some constraints we haven't worried about yet <pause dur="0.4"/> <kinesic desc="indicates point on board" iterated="n"/> where saving starts up <pause dur="0.5"/><kinesic desc="indicates point on board" iterated="n"/> where saving finishes <pause dur="0.9"/> we'll bing the bung those in later <pause dur="1.5"/> clear </u><pause dur="0.7"/> <u who="sf0768" trans="pause"> i don't understand how the Hamiltonian relates to the Lagrangian </u><pause dur="1.5"/> <u who="nm0765" trans="pause"> <vocal desc="sigh" iterated="n"/>  <pause dur="1.4"/> okay let's go back </u><pause dur="0.3"/> <u who="sf0768" trans="pause"> sorry </u><pause dur="0.5"/> <u who="sf0768" trans="pause"> <kinesic desc="writes on board" iterated="y" dur="1"/> we had the Lagrangian <pause dur="1.0"/> yes </u><u who="sf0768" trans="overlap"> mm </u><u who="nm0765" trans="latching"> which <kinesic desc="writes on board" iterated="y" dur="2"/> consisted of <pause dur="0.3"/> F <pause dur="0.3"/> plus what <pause dur="0.3"/> oh dear <pause dur="0.2"/> hang on <pause dur="0.2"/><event desc="stands on equipment" iterated="n"/><kinesic desc="writes on board" iterated="y" dur="3"/> lambda-G <pause dur="1.9"/> plus some other stuff </u><pause dur="1.0"/> <u who="sf0768" trans="pause"> right </u><u who="nm0765" trans="overlap"> okay <pause dur="1.1"/> and we said we needed to maximize that at each time period little-T </u><pause dur="1.0"/> <u who="sf0768" trans="pause"> oh so </u><u who="nm0765" trans="overlap"> so when we maximize the Lagrangian at each pime time period little-T <pause dur="1.3"/><kinesic desc="writes on board" iterated="y" dur="1"/> we're basically maximizing the <trunc>ham</trunc> 
Hamiltonian <pause dur="0.3"/> plus some other stuff <pause dur="0.3"/> at each time period little-T </u><pause dur="0.7"/> <u who="sf0768" trans="pause"> mm </u><pause dur="0.7"/> <u who="nm0765" trans="pause"> so that's how the Hamiltonian comes in <pause dur="1.2"/> it's just basically <pause dur="0.3"/> a way of writing <pause dur="1.0"/> a part of the Lagrangian </u><pause dur="1.5"/> <u who="sf0769" trans="pause"> # okay </u><pause dur="1.7"/> <u who="nm0765" trans="pause"> is that all right </u><u who="sf0768" trans="overlap"> so it's not the differential of the Lagrangian then like </u><u who="nm0765" trans="overlap"> no <pause dur="0.7"/> the derivative of the Hamiltonian <pause dur="0.7"/> is the differential of the Lagrangian </u><pause dur="1.9"/> <u who="sf0768" trans="pause"> oh okay </u><pause dur="0.7"/> <u who="nm0765" trans="pause"> so we <trunc>differe</trunc> <pause dur="0.2"/> when we differentiate the Lagrangian <pause dur="1.1"/> we're doing the same thing we're differentiating the Hamiltonian </u><pause dur="0.8"/> <u who="sf0768" trans="pause"> so we just forget about all those other bits then <pause dur="0.7"/> <gap reason="inaudible" extent="1 sec"/> Lagrangian </u><u who="nm0765" trans="overlap"> basically <pause dur="0.3"/> provided you know <pause dur="0.6"/><kinesic desc="indicates point on board" iterated="n"/> the differential equation that gives you this <kinesic desc="indicates point on board" iterated="n"/> the differential equation that gives you that <pause dur="0.2"/> you can forget all that stuff about the <pause dur="0.9"/> Lagrangian if you want if you just want to solve the problem </u><pause dur="0.6"/> <u who="sf0768" trans="pause"> okay </u><pause dur="0.5"/> <u who="nm0765" trans="pause"> so the only conditions you need to know <pause dur="0.6"/> i've written on for you at the bottom of page two of the notes <pause dur="0.9"/> provided you know that <pause dur="0.4"/> you 
can solve optimal control problems </u><pause dur="2.2"/> <u who="sf0768" trans="pause"> okey-dokey </u><pause dur="0.4"/> <u who="nm0765" trans="pause"> okey-dokey <pause dur="0.7"/> now any more questions while i'm at it <pause dur="1.4"/> oh i've got a question for you <pause dur="1.2"/> what's the <kinesic desc="indicates point on board" iterated="n"/> solution for this differential equation <pause dur="0.5"/> i'm going to choose the back row <pause dur="2.7"/><kinesic desc="indicates member of audience" iterated="n"/> ha ha ha <pause dur="1.0"/> you haven't got the faintest idea </u><u who="sm0770" trans="latching"> <gap reason="inaudible" extent="1 sec"/> solution <gap reason="inaudible" extent="1 sec"/> lambda </u><pause dur="0.3"/> <u who="nm0765" trans="pause"> ah nice try <pause dur="0.4"/><kinesic desc="writes on board" iterated="y" dur="3"/> suppose i gave you X-prime is equal to R-times-X <pause dur="1.3"/> it's a linear differential equation <pause dur="0.3"/> with R <pause dur="0.6"/> okay <pause dur="2.8"/><kinesic desc="writes on board" iterated="y" dur="6"/> a solution to this one is lambda at time T <pause dur="0.4"/> is equal to an arbitrary constant times E-to-the-power-R-T <pause dur="1.7"/> if i differentiate this with respect to R i just get an extra R at the front ah <kinesic desc="writes on board" iterated="n"/> minus-R <pause dur="3.2"/> is that clear <pause dur="2.6"/><vocal desc="laugh" iterated="n"/> i'll take it slower <vocal desc="laughter" iterated="y" n="sl" dur="1"/> <pause dur="2.1"/><event desc="wipes board" iterated="y" dur="10"/> i've got to rub off the problem 'cause we need all that stuff <pause dur="5.2"/> so <pause dur="2.1"/> we now have <pause dur="0.9"/><kinesic desc="indicates point on board" iterated="n"/> these three equations <pause dur="0.3"/> in these <pause dur="0.3"/> three unknowns <pause dur="0.2"/> lambda-T we don't know <pause dur="0.3"/> consumption we don't know <pause dur="0.2"/> savings 
we don't know <pause dur="1.3"/> we've got <pause dur="0.8"/><kinesic desc="indicates point on board" iterated="n"/> differential equation here <pause dur="0.4"/> in <pause dur="0.2"/> lambda <pause dur="0.9"/> it's a very simple differential equation it's a differential equation that appeared on right on the front of your notes on differential equations <pause dur="0.5"/> it's a one variable <pause dur="0.2"/> linear differential equation <pause dur="0.5"/> if you just took those notes on differential equations and plugged everything in <pause dur="0.5"/><kinesic desc="writes on board" iterated="y" dur="6"/> you would find that the solution was <pause dur="0.3"/> lambda at time T some arbitrary constant times E-to-the-minus-R-T <pause dur="1.8"/> you can check that because if <kinesic desc="writes on board" iterated="y" dur="7"/> we do <pause dur="0.2"/> differentiate lambda <pause dur="0.5"/> at time T <pause dur="0.4"/> you get minus-R-K <pause dur="0.2"/> E-to-the-minus-R-T <pause dur="1.7"/> right which is the same <kinesic desc="writes on board" iterated="y" dur="2"/> thing as minus-R times lambda-T <pause dur="2.7"/> yeah <pause dur="1.8"/><kinesic desc="makes questioning gesture" iterated="n"/> brilliant <pause dur="0.5"/> so the solution to <kinesic desc="indicates point on board" iterated="n"/> this equation <kinesic desc="writes on board" iterated="y" dur="7"/> now i can write it down <pause dur="0.3"/> is lambda at time T <pause dur="0.6"/> is equal to an arbitrary constant times E-to-the-minus-R-T <pause dur="2.3"/> so we know 
what lambda is <pause dur="0.7"/> and because we know what lambda is we know what consumption is <pause dur="2.3"/><event desc="wipes board" iterated="y" dur="2"/> let's get rid of that <pause dur="1.7"/> consumption <pause dur="2.1"/><kinesic desc="writes on board" iterated="y" dur="7"/> is <pause dur="0.3"/> one-over-<pause dur="0.2"/>lambda at time T <pause dur="1.0"/> from this equation <pause dur="2.3"/> and one-over-lambda at <kinesic desc="writes on board" iterated="y" dur="4"/> time T <pause dur="0.7"/> is # <pause dur="0.2"/> one-over-K <pause dur="0.5"/> E-to-the-R-T <pause dur="1.9"/> so what's happening to the optimal path of consumption <pause dur="0.3"/> in this problem <pause dur="0.6"/> well it's growing exponentially fast at the rate E-to-the-R-T <pause dur="1.3"/> we've solved we've learned something <pause dur="1.4"/> we don't know where <pause dur="0.2"/> what <kinesic desc="indicates point on board" iterated="n"/> this arbitrary constant is but we know the general pattern <pause dur="0.5"/> of the path of consumption <pause dur="1.6"/> what about savings <pause dur="1.3"/><kinesic desc="writes on board" iterated="y" dur="11"/> well <pause dur="0.9"/> the <trunc>cha</trunc> rate in change of savings <pause dur="0.6"/> is equal to R-S <pause dur="0.5"/> minus consumption which is minus-<pause dur="0.3"/>#-one-over-K <pause dur="0.5"/> E-to-the-R-T <pause dur="1.6"/> so now we have a differential equation <pause dur="0.2"/> for savings at time T <pause dur="1.7"/> which we need to solve <pause dur="1.1"/> so <pause dur="0.3"/> do i solve it <pause dur="1.9"/> i've just told you what the solution is <pause dur="3.4"/> how are we going to do it <pause dur="0.3"/> well <pause dur="0.8"/> we're 
going to do it in two stages <kinesic desc="writes on board" iterated="y" dur="7"/> we'll do it S-prime <pause dur="0.3"/> minus R-S <pause dur="0.4"/> is equal to minus-one-over-K <pause dur="0.6"/> E-to-the-R-T <pause dur="0.6"/> and then we multiply through by <pause dur="0.2"/> E-to-the-minus-R-T <pause dur="0.8"/><kinesic desc="writes on board" iterated="y" dur="10"/> so we get S-prime <pause dur="0.3"/> E-to-the-minus-R-T <pause dur="0.4"/> minus R E-to-the-minus-R-T S <pause dur="0.7"/> is equal to <pause dur="0.2"/> minus-one-over-K <pause dur="2.8"/> and then we notice that <kinesic desc="indicates point on board" iterated="n"/> this term here <pause dur="0.2"/><kinesic desc="writes on board" iterated="y" dur="10"/> is the derivative <pause dur="0.8"/> of S <pause dur="0.3"/> times E-to-the-minus-R-T <pause dur="1.8"/> just applying the <trunc>prod</trunc> product rule <pause dur="3.2"/> so <pause dur="0.7"/> if i differentiate S with respect to T <pause dur="0.2"/> and hold the E-to-the-minus-R-T term constant <pause dur="0.4"/> i get this <kinesic desc="indicates point on board" iterated="n"/> bit <pause dur="0.9"/> if i <trunc>di</trunc> <pause dur="0.8"/> <trunc>differenti</trunc> hold the S constant <pause dur="0.3"/> and differentiate <pause dur="0.2"/> E-to-the-minus-R-T <pause dur="0.3"/> with respect to T <pause dur="0.3"/> i get minus-R <pause dur="0.2"/><kinesic desc="indicates point on board" iterated="n"/> E-to-the-minus-R-T here <pause dur="0.5"/> and then the S which i'm holding constant <pause dur="0.7"/> right just from the product rule <pause dur="2.3"/> do you believe me </u><pause dur="1.0"/> <u who="sf0771" trans="pause"> yeah <pause dur="0.5"/> <vocal desc="laughter" iterated="y" n="sl" dur="1"/> </u><pause dur="0.3"/> <u who="nm0765" trans="pause"> do you <trunc>un</trunc> that's another <trunc>que</trunc> <pause dur="0.3"/> do you understand </u><pause dur="0.4"/> <u who="sf0771" trans="pause"> yes <pause dur="1.0"/> i think </u><pause dur="0.6"/> <u who="nm0765" trans="pause"> <vocal desc="laugh" iterated="n"/><pause dur="0.2"/> i can do it again </u><u who="sf0771" trans="latching"> yeah just do the last two lines </u><u who="nm0765" trans="latching"> okay from <pause dur="0.2"/><kinesic desc="indicates point on board" iterated="n"/> this bit to <kinesic desc="indicates point on board" iterated="n"/> this bit </u><pause dur="0.3"/> <u who="sf0771" trans="pause"> yeah </u><pause dur="0.5"/> <u who="nm0765" trans="pause"> okay <pause dur="0.8"/> i said to you the 
problem <kinesic desc="indicates point on board" iterated="n"/> differentiate this with respect to T <pause dur="0.2"/> what are you going to do <pause dur="0.6"/> well first of all you'll differentiate S with respect to T <pause dur="0.3"/> and hold <kinesic desc="indicates point on board" iterated="n"/> this bit constant <pause dur="0.6"/> if you did that <pause dur="0.3"/> you'd get S-prime <pause dur="0.6"/> E-to-the-minus-R-T <pause dur="1.3"/> then you'd hold the <pause dur="0.8"/> S bit constant <pause dur="0.5"/> and you'd differentiate <kinesic desc="indicates point on board" iterated="n"/> this bit <pause dur="0.2"/> so you'd get <pause dur="0.2"/> minus-R <pause dur="0.2"/> E-to-the-minus-R-T <pause dur="1.0"/> from differentiating <kinesic desc="indicates point on board" iterated="n"/> this stuff <pause dur="0.4"/> and then the S <pause dur="0.2"/> that you're holding constant <pause dur="2.1"/> brilliant <kinesic desc="indicates member of audience" iterated="n"/> </u><pause dur="3.8"/><u who="sf0772" trans="pause"> yeah </u><pause dur="0.4"/> <u who="nm0765" trans="pause"> right <pause dur="0.4"/> so <pause dur="1.2"/> we know the <trunc>differe</trunc> differential of <kinesic desc="indicates point on board" iterated="n"/> this with respect to T is <pause dur="0.2"/><kinesic desc="indicates point on board" iterated="n"/> this <pause dur="0.9"/> so to solve for S <pause dur="0.9"/> oh # you're not going to like that i'd better come back over here <pause dur="7.3"/><event desc="wipes board" iterated="y" dur="5"/><kinesic desc="writes on board" iterated="n"/> so for S <pause dur="0.5"/> we say write <pause dur="0.3"/><kinesic desc="writes on board" iterated="y" dur="6"/> S <pause dur="0.6"/> E-to-the-minus-R-T <pause dur="0.4"/> is equal to <pause dur="0.6"/> T-over-K <pause dur="0.3"/> plus another arbitrary constant which we'll call C <pause dur="0.8"/> or <kinesic desc="writes on board" iterated="n"/> minus-T-over-K <pause dur="1.3"/> just integrating both sides <pause dur="0.4"/> we integrate <kinesic desc="indicates point on board" iterated="n"/> this we get minus-one-over-K times T <pause dur="0.2"/> plus another arbitrary constant <pause dur="1.3"/> so finally <pause dur="0.3"/><kinesic desc="writes on board" iterated="y" dur="14"/> 
we know the path of saving <pause dur="1.1"/> which is <pause dur="1.2"/> E-to-the-minus-R-T <pause dur="0.5"/> times T-over-K <pause dur="0.6"/> with a minus there <pause dur="1.4"/> plus <pause dur="0.2"/> another arbitrary constant <pause dur="0.2"/> # E-to-the-minus-R-T <pause dur="3.4"/> no we don't <pause dur="0.3"/><kinesic desc="writes on board" iterated="y" dur="2"/> that's a minus-R-T <pause dur="0.8"/> so these are pluses <pause dur="2.3"/> okay <pause dur="3.3"/> so <pause dur="0.2"/> what have we done <pause dur="2.0"/> we've <pause dur="0.5"/><kinesic desc="writes on board" iterated="y" dur="1"/> taken the differential equation <pause dur="0.2"/> for lambda <pause dur="1.0"/> and solved it <pause dur="1.7"/> that allowed us to find what consumption was <pause dur="0.8"/> and then we plugged in the <pause dur="0.3"/> what we knew for consumption into the differential equation for saving <pause dur="0.4"/> and solved that <pause dur="1.1"/> so to sum up <pause dur="0.3"/> we've got <pause dur="0.4"/><kinesic desc="writes on board" iterated="y" dur="2"/> lambda at time T <pause dur="0.9"/> is <pause dur="0.2"/> from here <kinesic desc="indicates point on board" iterated="n"/><pause dur="0.8"/> an arbitrary constant <pause dur="0.3"/><kinesic desc="writes on board" iterated="y" dur="12"/> times E-to-the-minus-R-T <pause dur="1.6"/> <trunc>s</trunc> consumption at time T <pause dur="0.8"/> is the same arbitrary constant one-over-it <pause dur="0.7"/> times E-to-the-plus-R-T so consumption is growing <pause dur="0.9"/> at the rate exponentially at the rate T <pause dur="1.2"/> and we've got <kinesic desc="writes on board" iterated="y" dur="2"/> saving at <pause dur="0.2"/> time T 
finally <pause dur="0.3"/><kinesic desc="indicates point on board" iterated="n"/> from up here which is doing something funny <pause dur="1.4"/><kinesic desc="writes on board" iterated="y" dur="2"/> it's growing at the rate E-to-the-R-T <pause dur="0.7"/><kinesic desc="indicates point on board" iterated="n"/> from this bit <pause dur="0.6"/> then we have to knock off <pause dur="1.2"/><kinesic desc="writes on board" iterated="y" dur="7"/> K oh sorry knock off <pause dur="0.4"/> T-over-K <pause dur="0.7"/> times E-to-the-R-T here <pause dur="0.2"/> so it's not clear what saving's doing <pause dur="1.6"/> but if consumption's growing i guess saving's <kinesic desc="writes on board" iterated="n"/> got to grow <pause dur="0.6"/> so we've solved our problem <pause dur="0.9"/> we took <pause dur="0.7"/> the problem of finding the optimal path for <trunc>capit</trunc> <pause dur="0.4"/> good consumption <pause dur="1.5"/> wrote down the Hamiltonian conditions which gave us <kinesic desc="indicates point on board" iterated="n"/> this equation and <kinesic desc="indicates point on board" iterated="n"/> this equation <pause dur="1.4"/> and we got # <pause dur="0.6"/><kinesic desc="indicates point on board" iterated="n"/> this equation <pause dur="0.5"/> from the constraint <pause dur="0.7"/> solved them <pause dur="0.5"/> and we had to solve some differential equations <pause dur="0.2"/> to do that <pause dur="0.2"/> but it's not surprising you have to solve differential equations 'cause differential equations <pause dur="0.3"/> are equations which have <pause dur="0.2"/> functions as solutions paths as solutions <pause dur="0.4"/> and we're trying to find paths aren't we we're trying to find a path for consumption <pause dur="1.6"/> and <kinesic desc="indicates point on board" iterated="n"/> this is what we get <pause dur="1.6"/> right <pause dur="2.1"/> any questions </u><pause dur="1.9"/> <u who="sf0768" trans="pause"> 
yeah i lost the second when you went from <kinesic desc="indicates board" iterated="n"/> that side of the board <kinesic desc="indicates board" iterated="n"/> over here </u><pause dur="0.3"/> <u who="nm0765" trans="pause"> <kinesic desc="writes on board" iterated="y" dur="1"/><kinesic desc="indicates point on board" iterated="n"/> this side </u><pause dur="0.3"/> <u who="sf0768" trans="pause"> yeah </u><pause dur="0.5"/> <u who="nm0765" trans="pause"> to this side <kinesic desc="writes on board" iterated="y" dur="2"/><kinesic desc="indicates section of board" iterated="n"/> </u><pause dur="0.5"/> <u who="sf0768" trans="pause"> mm <pause dur="0.9"/> what happened there </u><pause dur="0.2"/> <u who="nm0765" trans="pause"> what happened there <pause dur="0.3"/> i integrated both sides </u><pause dur="0.5"/> <u who="sf0768" trans="pause"> oh okay </u><u who="nm0765" trans="latching"> so <pause dur="0.3"/> if the derivative of <kinesic desc="indicates point on board" iterated="n"/> this is a constant <pause dur="1.1"/> if anything has a constant derivative </u><pause dur="0.4"/> <u who="sf0768" trans="pause"> mm </u><pause dur="0.3"/> <u who="nm0765" trans="pause"> then <pause dur="0.3"/> the actual thing has got to be a linear function </u><pause dur="1.1"/> <u who="sf0768" trans="pause"> right </u><pause dur="0.4"/> <u who="nm0765" trans="pause"> so this is a <pause dur="0.9"/><kinesic desc="indicates point on board" iterated="n"/> has a <trunc>k</trunc> <pause dur="0.2"/> constant derivative <pause dur="0.2"/> so when i integrate it up <pause dur="0.3"/> it's got to have <pause dur="0.2"/> K <pause dur="0.8"/> it's got to be linear in T </u><pause dur="2.2"/> <u who="sf0768" trans="pause"> okay </u><pause dur="0.2"/> <u who="sf0772" trans="pause"> is that C consumption or a constant </u><u who="nm0765" trans="overlap"> if i <pause dur="0.7"/> it's a constant </u><pause dur="0.5"/> <u who="sf0768" trans="pause"> mm okay </u><u who="nm0765" trans="latching"> so if i do it backwards let's do it backwards <pause dur="1.5"/> if i took that <pause dur="1.2"/><kinesic desc="indicates point on board" iterated="n"/><kinesic desc="writes on board" iterated="y" dur="6"/> and then i differentiated both sides <pause dur="0.6"/> with respect to T <pause dur="4.1"/> what am i going to get <kinesic desc="indicates point on board" iterated="n"/> if i differentiate this with respect to T <pause dur="1.9"/></u><u who="sf0768" trans="overlap"> <gap reason="inaudible" extent="1 sec"/></u><u who="nm0765" trans="overlap"> i'm going to get minus-one-over-K <pause dur="1.8"/> which i've 
got <kinesic desc="indicates point on board" iterated="n"/> here <pause dur="0.2"/> minus-one-over-K <pause dur="1.1"/><kinesic desc="indicates point on board" iterated="n"/> here i've got just that differentiated with respect to T </u><pause dur="0.5"/> <u who="sf0768" trans="pause"> mm-hmm </u><pause dur="0.5"/> <u who="nm0765" trans="pause"> so <pause dur="1.2"/> you're happy that <kinesic desc="indicates point on board" iterated="n"/> that's the same as <kinesic desc="indicates point on board" iterated="n"/> that <pause dur="0.6"/> it sorry <kinesic desc="indicates point on board" iterated="n"/> this stuff <pause dur="0.3"/> is the same <kinesic desc="indicates point on board" iterated="n"/> as this stuff </u><u who="sf0768" trans="latching"> mm-hmm </u><pause dur="0.4"/> <u who="nm0765" trans="pause"> so let's just rub out the <pause dur="0.3"/> the brackets <pause dur="5.1"/><event desc="wipes board" iterated="y" dur="7"/> oh <gap reason="inaudible" extent="1 sec"/> i'd better <shift feature="voice" new="laugh"/>write it out again <pause dur="2.4"/> <shift feature="voice" new="normal"/><kinesic desc="writes on board" iterated="y" dur="7"/> S E-to-the-minus-R-T <pause dur="1.1"/> minus-one-over-<pause dur="0.4"/>K <pause dur="0.2"/> T <pause dur="0.2"/> plus an arbitrary constant <pause dur="0.3"/><gap reason="inaudible" extent="1 sec"/><pause dur="1.2"/> it's a big C <pause dur="0.2"/> not a little C <pause dur="0.4"/> in the notes it's <pause dur="0.8"/> it's clear that it's a big C <pause dur="3.8"/> right <pause dur="2.7"/> but we haven't done anything <pause dur="0.8"/> because <pause dur="0.6"/><kinesic desc="indicates point on board" iterated="n"/> this solution that we've written up here <pause dur="3.2"/><event desc="wipes board" iterated="y" dur="3"/><event desc="drops radio microphone transmitter" iterated="n"/> oh dear <pause dur="6.3"/><event desc="replaces transmitter on belt" iterated="n"/> right <pause dur="0.4"/> this solution that we've written up here <pause dur="3.0"/> <event desc="wipes board" iterated="y" dur="6"/> has these arbitrary constants <pause dur="1.3"/> and how and we got two arbitrary constants we got <kinesic desc="indicates point on board" iterated="n"/> this K <pause dur="0.7"/> and now we've got <kinesic desc="indicates point on board" iterated="n"/> this <pause dur="0.7"/> C as well this big C here <pause dur="0.9"/> how are we going to 
solve them <pause dur="1.1"/> well we know two things <pause dur="1.8"/><kinesic desc="writes on board" iterated="n"/> we know <pause dur="3.3"/><kinesic desc="writes on board" iterated="y" dur="5"/> what the initial level of saving was it's some number <pause dur="0.2"/> S-nought that's what you start your life with <pause dur="0.9"/> you know something else as well <pause dur="2.5"/> you know <pause dur="0.6"/> that you can't end your life <pause dur="1.3"/> with <pause dur="0.9"/> zero saving so we know that <pause dur="0.7"/><kinesic desc="writes on board" iterated="y" dur="4"/> S at time capital-T <pause dur="0.3"/> has got to be greater than or equal to nought <pause dur="3.1"/><kinesic desc="writes on board" iterated="y" dur="1"/> that gives us <pause dur="0.7"/> a different <pause dur="0.2"/> a condition <pause dur="1.0"/><kinesic desc="writes on board" iterated="y" dur="8"/> <gap reason="inaudible" extent="1 sec"/> a <trunc>la</trunc> Lagrangian which says that lambda at time T <pause dur="0.6"/> times S at time T minus zero <pause dur="1.1"/> has got to be greater than or equal to zero <pause dur="0.7"/> oh sorry <pause dur="0.3"/> it's got to equal zero <pause dur="2.8"/><kinesic desc="writes on board" iterated="y" dur="4"/> we know that S this has got to be positive <pause dur="0.4"/> we know that's got to be positive <pause dur="1.2"/> so we can use <pause dur="0.8"/><kinesic desc="writes on board" iterated="y" dur="1"/><kinesic desc="indicates point on board" iterated="n"/> this condition <pause dur="0.8"/> and this <kinesic desc="writes on board" iterated="y" dur="1"/><kinesic desc="indicates point on board" iterated="n"/> condition <pause dur="0.6"/> to tie down the arbitrary constants <pause dur="2.9"/> basically <kinesic desc="writes on board" iterated="y" dur="10"/> 
what we're going to get <pause dur="0.7"/> is going to get S at time zero is equal to S-nought <pause dur="0.6"/> S at time T <pause dur="1.9"/> well <pause dur="1.4"/> <gap reason="inaudible" extent="1 sec"/><pause dur="2.5"/> right <pause dur="1.9"/> so before we go on <pause dur="0.6"/> any questions <pause dur="2.4"/> yeah </u><u who="sm0773" trans="overlap"> where was that # <pause dur="0.6"/> multiplier you put down on top of the </u><pause dur="0.2"/> <u who="nm0765" trans="pause"> <kinesic desc="indicates point on board" iterated="n"/> this one </u><u who="sm0773" trans="overlap"> # that's right </u><pause dur="0.7"/> <u who="nm0765" trans="pause"> that came from the <trunc>f</trunc> last things i wrote down <pause dur="0.6"/> right before i rubbed off <pause dur="0.4"/> the <pause dur="1.8"/> # Lagrangian <pause dur="0.7"/> the Lagrangian <pause dur="1.2"/> on page two of your notes <pause dur="2.1"/> if you look right down at the bottom <pause dur="1.0"/> you'll see what i wrote on the board <pause dur="0.2"/> the very last line <pause dur="0.5"/> mu <gap reason="inaudible" extent="1 sec"/> is equal to lambda at time T <pause dur="0.9"/> nu times <trunc>ek</trunc> <trunc>ma</trunc> times X at time T-minus-X-nought <pause dur="0.3"/> oh that's a <gap reason="inaudible" extent="1 sec"/> is equal to zero <pause dur="1.2"/> so this <kinesic desc="indicates point on board" iterated="n"/><pause dur="0.5"/> statement here <pause dur="1.5"/> was the last thing i wrote down <pause dur="0.8"/> before <pause dur="0.5"/><kinesic desc="writes on board" iterated="y" dur="8"/> is equivalent to <pause dur="0.7"/> mu times <pause dur="1.1"/> X at time T-<pause dur="1.0"/>minus-X-nought <pause dur="1.2"/> equals zero <pause dur="0.2"/> it's equivalent to that thing <pause dur="1.8"/> okay <pause dur="3.0"/> we're going to deal with <kinesic desc="indicates board" iterated="n"/> these terminal 
conditions <pause dur="0.6"/> in greater depth now <pause dur="0.4"/> so let's <pause dur="0.5"/> move on </u><gap reason="break in recording" extent="uncertain"/> <u who="nm0765" trans="pause"> we've always talked about the constraint at the end <pause dur="0.3"/> as being <pause dur="0.8"/> you can't die <trunc>owe</trunc> owning money <pause dur="0.6"/> you can't die with negative savings <pause dur="0.3"/> but we talked about <pause dur="0.2"/> other sorts of terminal constraints that you might have <pause dur="0.4"/> when you're doing these optimizations we talked about <pause dur="0.2"/> steering a rocket <pause dur="0.3"/> to the moon <pause dur="0.6"/> and the terminal condition there was <pause dur="0.3"/> you ended up at the moon <pause dur="1.2"/> another sort of terminal condition you might have <pause dur="0.4"/> is you <pause dur="0.5"/> comes up when you # <pause dur="0.2"/> fill the bath <pause dur="0.6"/> when you fill the bath you have a <pause dur="0.2"/> an absolute level that you want the bath to fill to <pause dur="0.4"/> so <pause dur="0.5"/> you know the bath is full <pause dur="0.2"/> once the state variable has hit this particular level <pause dur="1.7"/> final sort of terminal condition you might come across <pause dur="0.3"/> would occur if you owned a machine <pause dur="0.7"/> or a factory <pause dur="0.3"/> or something like that <pause dur="0.4"/> actually this isn't the final one there's another one <pause dur="0.9"/> and the terminal condition there is <pause dur="0.4"/> when do you quit <pause dur="0.5"/> when do you decide <pause dur="0.2"/> enough is enough and you 
want to leave the factory <pause dur="0.6"/> so <pause dur="1.3"/> that will be a terminal condition <trunc>req</trunc> required you to decide <pause dur="0.4"/> when to stop doing something <pause dur="2.2"/> another <trunc>ker</trunc> terminal condition would arise <pause dur="0.6"/> if <pause dur="0.6"/> once you die <pause dur="1.2"/> or once your machine is <pause dur="2.5"/> dead <pause dur="0.6"/><event desc="picks up piece of radio microphone from the floor" iterated="n"/><vocal desc="laughter" iterated="y" n="sl" dur="1"/> </u><pause dur="0.4"/> <u who="om0774" trans="pause"> it's okay </u><pause dur="0.3"/> <u who="nm0765" trans="pause"> <vocal desc="laughter" iterated="y" n="sl" dur="1"/> i'm ruining your equipment <pause dur="0.4"/> <vocal desc="laughter" iterated="y" n="om0774" dur="1"/> once your machine is dead <pause dur="1.0"/> # you get a certain value from it <pause dur="0.7"/> so <pause dur="0.8"/> # <pause dur="0.5"/> suppose we looked at an investment problem <pause dur="0.7"/> and <pause dur="1.2"/> you had to <pause dur="0.4"/> plan your production for your firm so you had to choose the path of production <pause dur="0.3"/> and then decide <pause dur="0.3"/> when to scrap your machine <pause dur="0.3"/> but once the machine and your investment and your plant were scrapped <pause dur="0.2"/> you could take it and sell it to somebody <pause dur="0.9"/> so <pause dur="0.2"/> the amount which you could sell this stuff to at the end of the machine's life <pause dur="0.5"/> would determine <pause dur="0.8"/> when you wanted to stop <pause dur="0.9"/> okay so <pause dur="0.4"/> there are lots and lots of different sorts of ways in which the end point <pause dur="0.3"/> might affect <pause dur="0.5"/> what you wanted to do it 
with your problem <pause dur="0.7"/> so let's look at <pause dur="0.3"/> some of them now <pause dur="0.9"/> # <pause dur="0.5"/> so we're actually on page <pause dur="1.2"/> four of your notes <pause dur="2.3"/><kinesic desc="writes on board" iterated="y" dur="13"/> so first of all <pause dur="0.3"/> let's study the situation <pause dur="0.3"/> where you have a finite <pause dur="0.5"/> time <pause dur="0.5"/> of <pause dur="1.0"/> shall we say death <pause dur="1.8"/> capital-T <pause dur="2.2"/> and what sorts of constraints might you face when you die <pause dur="1.7"/> well <pause dur="0.3"/> the easiest would be <kinesic desc="writes on board" iterated="y" dur="2"/> none <pause dur="2.0"/> what that means is <pause dur="0.2"/> that when you die <pause dur="0.2"/> there is no constraint on the <pause dur="0.6"/> your final position <pause dur="0.3"/> your final value of the state variable <pause dur="0.8"/> so none <pause dur="1.4"/><kinesic desc="writes on board" iterated="y" dur="10"/> I-E <pause dur="0.7"/> X at time capital-T <pause dur="0.3"/> is <pause dur="0.3"/> unconstrained <pause dur="7.3"/> if X at time capital-T is unconstrained <pause dur="1.0"/> what would you expect the <pause dur="0.4"/> Lagrange multiplier associated with X at time T capital-T to <trunc>b</trunc> take <pause dur="1.3"/> well <pause dur="0.6"/> we'd expect <pause dur="2.6"/><kinesic desc="writes on board" iterated="y" dur="4"/> a Lagrange multiplier was zero <pause dur="0.3"/> <trunc>i</trunc> if <pause dur="0.2"/> if something is unconstrained <pause dur="0.5"/> it 
has a zero Lagrange multiplier <pause dur="1.0"/> and that's exactly <pause dur="2.2"/><kinesic desc="writes on board" iterated="n"/> the condition <pause dur="1.5"/> if you have a problem where you <pause dur="0.8"/> don't care about <trunc>w</trunc> where you end up <pause dur="0.5"/> then it must be the case <pause dur="0.2"/> that your costate variable takes a zero value <pause dur="0.2"/> at the end of your life <pause dur="2.1"/> second sort of constraint you might have <pause dur="1.0"/><kinesic desc="writes on board" iterated="y" dur="6"/> you might have a a precise constraint <pause dur="0.2"/> like the filling of the bath <pause dur="0.6"/> which says <pause dur="0.8"/> that once the bath is full it has to have a certain amount of water in it <pause dur="0.2"/> and that's it there is no discussion <pause dur="1.6"/> in that case <pause dur="2.8"/><kinesic desc="writes on board" iterated="y" dur="9"/> lambda at time capital-T is completely unrestricted <pause dur="5.0"/> and we saw that sort of constraint coming in when we did <pause dur="0.5"/> # <pause dur="1.0"/> standard constraint optimization when we did standard constraint optimizations <pause dur="0.5"/> equality constraints <pause dur="0.5"/> meant lambda-T could take positive values negative 
values <pause dur="0.6"/> we couldn't necessarily say that Lagrange multiplier will be positive or negative <pause dur="0.5"/> when we had equality constraints <pause dur="0.2"/> and the same comes through here <pause dur="3.5"/> final <kinesic desc="writes on board" iterated="y" dur="5"/> condition <pause dur="0.7"/> which we've seen before <pause dur="2.9"/> X at time T has got to be greater than some number <pause dur="0.6"/> so <pause dur="0.2"/> that means you can't die <trunc>owe</trunc> owning money for example <pause dur="1.9"/> and the <kinesic desc="writes on board" iterated="y" dur="1"/> constraint there <pause dur="0.9"/> i've given you is that # <pause dur="5.4"/> that looks wrong to me <pause dur="4.3"/> no <pause dur="1.6"/><kinesic desc="writes on board" iterated="y" dur="7"/> lambda at time T <pause dur="0.3"/> times <pause dur="0.6"/> X at time T minus X-T <pause dur="0.5"/> equals zero <pause dur="1.2"/> which it <pause dur="0.4"/> so that says either <pause dur="1.5"/> the <pause dur="0.4"/> costate variable <pause dur="0.2"/> is zero <pause dur="0.6"/> so <kinesic desc="indicates point on board" iterated="n"/> this constraint isn't binding <pause dur="0.3"/> and it's like X at time T is entirely free <pause dur="0.9"/> or <pause dur="0.9"/> X at time T <pause dur="0.7"/> equals <pause dur="1.1"/> X-subscript-<pause dur="0.2"/>capital-T <pause dur="0.5"/> so the constraint does bind <pause dur="0.5"/> and then <pause dur="0.5"/> lambda at time T <pause dur="0.5"/> can be any value <pause dur="1.2"/> so this is a <pause dur="0.5"/> a way of writing <kinesic desc="indicates point on board" iterated="n"/> this statement and <kinesic desc="indicates point on board" iterated="n"/> this statement in some sort of composite 
form <pause dur="2.9"/> okay <pause dur="1.5"/><kinesic desc="writes on board" iterated="n"/> so that's <trunc>w</trunc> <pause dur="0.7"/> these conditions <pause dur="0.4"/> have a <trunc>prop</trunc> a name <pause dur="0.5"/><kinesic desc="writes on board" iterated="y" dur="10"/> they're called <pause dur="0.5"/> transversality conditions <pause dur="8.0"/> transversality conditions <pause dur="0.2"/> are conditions that arise <pause dur="0.2"/> from the <pause dur="0.6"/> what goes on at the end of a life problem <pause dur="0.3"/> end of the life of a problem condition <pause dur="1.9"/> and they're very useful information <pause dur="0.2"/> not in solving for the path usually <pause dur="0.3"/> but they're useful information in solving for these arbitrary constants </u><gap reason="break in recording" extent="uncertain"/> <u who="nm0765" trans="pause"> right <pause dur="2.3"/> now that's <pause dur="0.7"/> # <pause dur="1.1"/> transversality <event desc="wipes board" iterated="y" dur="5"/> conditions <pause dur="0.6"/> when we have a finite time horizon <pause dur="1.4"/> but lots of economic problems <pause dur="0.2"/> we don't want to have finite time horizons we want to allow consumers to live forever firms to live forever <pause dur="0.3"/> we want to allow countries and planning problems to go on forever <pause dur="1.0"/> and in problems like that we need a different set of <kinesic desc="writes on board" iterated="y" dur="9"/> transversality conditions so let's look at <pause dur="0.8"/> # <pause dur="1.1"/> 
infinite <pause dur="1.4"/> horizon <pause dur="2.8"/> problems now <pause dur="2.2"/> infinite horizon problems we really want to say <pause dur="0.2"/> the same things as <kinesic desc="indicates point on board" iterated="n"/> these <pause dur="0.4"/> but for the case where the capital-T is infinite <pause dur="1.2"/> so <pause dur="1.0"/> if there's <kinesic desc="writes on board" iterated="y" dur="1"/> no <pause dur="0.6"/> constraint <pause dur="0.6"/> what we want is then to <pause dur="1.8"/><kinesic desc="writes on board" iterated="y" dur="7"/> the limit <pause dur="0.4"/> as T tends to infinity <pause dur="0.4"/> of the costate variable of time capital-T <pause dur="0.6"/> is zero <pause dur="1.8"/> so instead of it being <pause dur="0.3"/> zero at time <trunc>t</trunc> capital-T <pause dur="0.3"/> we have it <pause dur="0.6"/> going to zero <pause dur="0.3"/> as we go off to infinity <pause dur="2.6"/> if we wanted a constraint which said <pause dur="1.3"/><kinesic desc="writes on board" iterated="y" dur="11"/> that in the limit <pause dur="0.9"/> X at time T <pause dur="0.4"/> equals some number <pause dur="0.4"/> let's call it X-infinity <pause dur="2.7"/> so <pause dur="0.2"/> as T <trunc>wen</trunc> goes to infinity <pause dur="0.3"/> the state variable <pause dur="0.2"/> gets closer and closer <pause dur="0.2"/><kinesic desc="indicates point on board" iterated="n"/> to this number X-infinity <pause dur="1.0"/> then the <kinesic desc="writes on board" iterated="n"/> equivalent transversality condition this one <kinesic desc="indicates point on board" iterated="n"/><pause dur="0.6"/> over here <pause dur="1.5"/> is just # <pause dur="2.1"/> well <kinesic desc="writes on board" iterated="y" dur="12"/> let's see <pause dur="0.5"/> 
lim-<pause dur="0.6"/>T tends to infinity <pause dur="1.6"/> lambda at time T <pause dur="0.5"/> is unrestricted <pause dur="5.5"/> and the final one <pause dur="0.4"/> again just rewriting <kinesic desc="indicates point on board" iterated="n"/> that <pause dur="0.5"/> <unclear>do you think</unclear> <pause dur="0.4"/><kinesic desc="writes on board" iterated="y" dur="12"/> for T tending to infinity <pause dur="0.4"/> is the lim-T tends to infinity <pause dur="0.5"/> X at time T <pause dur="0.4"/> is greater than or equal to some number X <pause dur="0.8"/> let's call it X-subscript-infinity <pause dur="1.3"/> what we require <pause dur="0.5"/> is that the <kinesic desc="writes on board" iterated="y" dur="10"/> limit <pause dur="0.7"/> as the capital-T tends to infinity <pause dur="0.4"/> lambda-T <pause dur="0.3"/> times X-T <pause dur="0.5"/> minus <pause dur="0.4"/> X-infinity <pause dur="0.8"/> equals zero <pause dur="0.8"/> and all that's written in your notes <pause dur="0.4"/> and <pause dur="0.2"/><kinesic desc="indicates board" iterated="n"/> all this <pause dur="0.2"/> is the same as <kinesic desc="indicates board" iterated="n"/> all that just letting capital-T go off <pause dur="0.9"/> places <pause dur="1.2"/> right <pause dur="0.5"/> so we've dealt with <pause dur="0.2"/> three sorts of end point restrictions that you might actually have in the your problems <pause dur="0.5"/> and these three sorts of end point restrictions <pause dur="0.3"/> just come from the Lagrange multiplier <pause dur="0.9"/> nature of the problem <pause dur="1.8"/> and we've done them in two cases we've done them where we in finite time horizons we've done them for infinite time horizons <pause dur="1.4"/> but there are other sorts of end point constraints that 
we talked about <pause dur="1.1"/><event desc="wipes board" iterated="y" dur="9"/> so let's look at one of them now <pause dur="4.6"/> now <pause dur="2.7"/> let's think of the machine problem <pause dur="0.5"/> the machine problem <pause dur="1.2"/><kinesic desc="writes on board" iterated="y" dur="2"/> what you have is you have <pause dur="0.6"/> a finite time horizon <pause dur="1.3"/><kinesic desc="writes on board" iterated="y" dur="6"/> with a pay-off which depends upon the time <pause dur="0.3"/> the states and the control <pause dur="1.6"/> and then <pause dur="0.4"/> you get some pay-off <pause dur="0.6"/> from what happens at the end of your life <pause dur="1.1"/><kinesic desc="writes on board" iterated="y" dur="6"/> so we have # <pause dur="0.9"/> a function <pause dur="0.2"/> phi here <pause dur="2.2"/> which depends upon <pause dur="0.2"/> where you end up <pause dur="0.4"/> so you can think of it as like being a prize <pause dur="0.5"/> or <pause dur="0.3"/> a reward <pause dur="0.2"/> or something <pause dur="0.9"/> so if you get big Xs <kinesic desc="indicates point on board" iterated="n"/> here maybe this number's good <pause dur="0.3"/> if you get small Xs <kinesic desc="indicates point on board" iterated="n"/> here maybe this number's bad <pause dur="0.4"/> but <pause dur="0.7"/> it's what the stock of assets of <pause dur="0.5"/> you own at the end of your life <pause dur="0.2"/> are actually worth to you <pause dur="0.2"/> in this problem <pause dur="2.8"/> now if we wanted to <kinesic desc="writes on board" iterated="y" dur="1"/> maximize <pause dur="0.7"/> this <pause dur="0.2"/> object <pause dur="1.6"/> we'd need to take account of the fact that <pause dur="0.3"/><kinesic desc="writes on board" iterated="y" dur="1"/> 
where we end up <pause dur="0.5"/> has effects <pause dur="0.4"/> on what <pause dur="0.2"/> pay-off we're going to get from this problem <pause dur="1.8"/> so <pause dur="1.9"/> what <pause dur="0.8"/> is the <pause dur="0.4"/> relevant <pause dur="0.8"/> terminal condition in this problem <pause dur="0.2"/> well the relevant terminal condition <pause dur="0.9"/><kinesic desc="writes on board" iterated="y" dur="9"/> is that <pause dur="1.1"/> lambda at time T <pause dur="0.6"/> is equal to the derivative <pause dur="0.6"/> of this function <pause dur="0.9"/> evaluated at X at time T <pause dur="1.5"/> so what does this say <pause dur="1.3"/> well <pause dur="0.7"/> suppose for some reason i was able to give you <pause dur="0.4"/> one more unit of <pause dur="0.3"/> final income <pause dur="1.3"/> one more unit of it <pause dur="1.9"/> how much more pay-off are you going to get <pause dur="0.4"/> well <pause dur="0.2"/> your pay-off is going to go up <unclear>and find out</unclear> <pause dur="0.4"/> it's close to this derivative <pause dur="1.6"/> so <pause dur="0.2"/><kinesic desc="indicates point on board" iterated="n"/> this says <pause dur="1.0"/> that lambda at time T <pause dur="0.3"/> has got to be equal to the marginal <pause dur="0.3"/> value to you <pause dur="0.2"/> of extra income <pause dur="0.3"/> at time T <pause dur="1.9"/> okay <pause dur="1.0"/> so this <pause dur="2.4"/> yeah that's what it says <pause dur="1.6"/> so <pause dur="0.7"/> you can think about this <kinesic desc="writes on board" iterated="y" dur="13"/> lambda at time T <pause dur="0.9"/> as being <pause dur="0.2"/> the value <pause dur="1.6"/> of <pause dur="0.9"/> extra <pause dur="1.4"/> X <pause dur="0.3"/> at <pause dur="0.6"/> time <pause dur="0.9"/> T </u><gap reason="break in recording" extent="uncertain"/> <u who="nm0765" trans="pause"> so we've been talking about these costate variables a lot <pause dur="0.5"/> we've talked 
about <pause dur="1.2"/> how we choose these costate variables <pause dur="1.9"/> and <pause dur="1.9"/> different constraints and how they affect the terminal value of these <trunc>ker</trunc> costate variables <pause dur="1.4"/> but i haven't really told you yet <pause dur="0.4"/> what these costate variables mean <pause dur="0.4"/> what they actually <pause dur="0.7"/> indicate <pause dur="1.5"/> so let's <pause dur="0.2"/><kinesic desc="writes on board" iterated="y" dur="11"/> think about that <pause dur="1.4"/> lambda-T <pause dur="0.8"/> is the costate variable <pause dur="8.8"/> what is it <pause dur="5.3"/><kinesic desc="writes on board" iterated="y" dur="1"/> well <pause dur="1.8"/> we know <kinesic desc="writes on board" iterated="y" dur="9"/> that it's a Lagrange multiplier <pause dur="7.1"/> and we know that Lagrange multipliers in some sense <pause dur="0.2"/> measure the cost of a constraint <pause dur="1.1"/> right <pause dur="0.8"/> when we look at straight consumer optimization problems <pause dur="0.3"/> the Lagrange multiplier there <pause dur="0.3"/> represents the marginal utility of <trunc>mon</trunc> <pause dur="0.2"/> money <pause dur="0.8"/> the Lagrange multiplier <pause dur="0.2"/> represents <pause dur="0.2"/> how much it costs the consumer <pause dur="0.2"/> to be constrained in its income if you could give the consumer more income <pause dur="0.2"/> the constraint would be weaker <pause dur="0.4"/> and the Lagrange multiplier measures that <pause dur="1.7"/><kinesic desc="indicates point on board" iterated="n"/> this 
is a Lagrange multiplier for a different sort of constraint it's essentially <pause dur="0.2"/> the <kinesic desc="writes on board" iterated="y" dur="7"/> Lagrange multiplier for the constraint that says <pause dur="0.4"/> X-prime of T <pause dur="0.4"/> is G-T-<pause dur="0.3"/>X-U <pause dur="2.2"/> right <pause dur="0.4"/><kinesic desc="indicates point on board" iterated="n"/> this is the constraint that relates <pause dur="0.3"/> X <pause dur="0.2"/> today <pause dur="0.2"/> to values of X <pause dur="0.2"/> tomorrow <pause dur="3.8"/> so what does this <pause dur="0.5"/><kinesic desc="indicates point on board" iterated="n"/> Lagrange multiplier measure well it measures the cost of <kinesic desc="indicates point on board" iterated="n"/> this constraint <pause dur="0.4"/> how much <pause dur="0.4"/> having <pause dur="0.2"/> X linked in this way to today and tomorrow <pause dur="0.2"/> costs you <pause dur="0.3"/> as an optimizer <pause dur="1.8"/> now that doesn't seem particularly transparent <pause dur="0.6"/> until you write it in a different way <pause dur="1.0"/><kinesic desc="writes on board" iterated="y" dur="43"/> lambda at time T <pause dur="0.4"/> measures <pause dur="3.3"/> the <pause dur="1.4"/> cost or benefit <pause dur="4.1"/> of <pause dur="0.6"/> a small <pause dur="2.0"/> increase <pause dur="2.1"/> in <pause dur="0.2"/> X at time T <pause dur="2.5"/> on on <pause dur="0.6"/> the <pause dur="0.5"/> solution <pause dur="2.3"/> to <pause dur="0.4"/> a <pause dur="1.7"/> an sorry <pause dur="1.6"/> optimal <pause dur="1.0"/> control <pause dur="1.8"/> problem <pause dur="3.4"/> so <pause dur="0.9"/> for some reason <pause dur="0.2"/> so <pause dur="0.3"/> what does lambda-T measure in an example <pause dur="0.8"/> think about # <pause dur="2.1"/> think about the problem of sending your rocket to the moon <pause dur="1.9"/> lambda at time T <pause dur="0.2"/> essentially measures maybe the costs <pause dur="0.4"/> associated with your fuel <pause dur="0.2"/> at time T <pause dur="1.2"/> so i <trunc>s</trunc> you're sending 
your your rocket to the moon <pause dur="0.2"/> and somehow someone comes along to you <pause dur="0.2"/> and says halfway to the moon <pause dur="0.5"/> i can give you another gallon of petrol <pause dur="0.5"/> how much is that worth to you <pause dur="1.8"/> well that's what lambda at time T measures <pause dur="1.1"/> the <trunc>m</trunc> <pause dur="0.3"/> the value to you somewhere along your problem <pause dur="0.2"/> of an extra unit of your state variable <pause dur="0.2"/> an extra unit of petrol <pause dur="0.3"/> an extra mile gone <pause dur="2.7"/> clear </u><pause dur="1.1"/> <u who="sf0768" trans="pause"> what does lambda-T measure in your consumption problem </u><u who="nm0765" trans="latching"> okay so it measures your money <pause dur="0.5"/> because <pause dur="0.2"/> what's the constraint in your consumption problem the constraint in your <kinesic desc="writes on board" iterated="y" dur="4"/> consumption problem <pause dur="0.3"/> was S-prime is equal to R-S-minus-C <pause dur="0.9"/> right <pause dur="0.6"/> so i can going to give you <pause dur="0.4"/> an extra unit's saving somewhere along the line <pause dur="0.7"/> so it measures <pause dur="0.5"/> the margin of utility of money to you </u><pause dur="1.4"/> <u who="sf0768" trans="pause"> mm-hmm </u><pause dur="1.8"/> <u who="nm0765" trans="pause"> yeah </u><u who="sf0768" trans="latching"> mm-hmm </u><pause dur="0.4"/> <u who="nm0765" trans="pause"> but it doesn't measure the marginal utility of money at any old point of time <pause dur="0.3"/> lambda at <pause dur="0.4"/> T <pause dur="0.2"/> <trunc>repre</trunc> represents the 
marginal utility of money to you <pause dur="0.2"/> at time T <pause dur="1.8"/> yeah <pause dur="2.5"/> fine <pause dur="2.4"/> # i can't think of a i can't think of a bath one <pause dur="0.8"/> but it would measure something like <pause dur="0.3"/> an extra egg cup full of water somewhere along the <sic corr="way">lay</sic> <pause dur="1.1"/> or # <pause dur="2.7"/> yeah <pause dur="0.2"/> # i think i've covered all the examples i understand <pause dur="0.6"/> if you can think of another one <pause dur="0.2"/> i'll have a go at it <pause dur="1.3"/><event desc="looks for chalk" iterated="y" dur="1"/><gap reason="inaudible" extent="1 sec"/><pause dur="0.4"/> i've got another piece <pause dur="1.5"/> okay <pause dur="0.8"/> so we've done that <pause dur="3.3"/> let's say more about these costate variables </u><gap reason="break in recording" extent="uncertain"/> <u who="nm0765" trans="pause"> consider a problem with discounting <pause dur="1.6"/><kinesic desc="writes on board" iterated="y" dur="12"/> now this is a <trunc>some</trunc> something that lots of mathematicians don't really <pause dur="0.5"/> understand but # <pause dur="0.5"/> let let's # <pause dur="4.5"/> we as economists do <pause dur="0.8"/> right <pause dur="1.6"/> this is a problem where <pause dur="0.5"/> we have <pause dur="0.6"/> a flow of utility <pause dur="0.4"/> from consumption <pause dur="0.2"/> at each point in time <pause dur="1.0"/> but this <pause dur="0.2"/> effect on our lifetime's income is discounted by the amount E-to-the-minus-R-T <pause dur="0.5"/> so one unit of consumption you <pause dur="0.2"/> to you at time zero <pause dur="0.7"/> is worth a lot <trunc>le</trunc> more <pause dur="0.4"/> to you than one unit of consumption at time <pause dur="0.2"/> 
capital-T <pause dur="0.4"/> because <pause dur="0.7"/> you're impatient <pause dur="0.4"/> and so <kinesic desc="indicates point on board" iterated="n"/> this E-to-the-minus-R-T <pause dur="0.3"/> makes <pause dur="0.2"/> future consumption worth less to you <pause dur="0.2"/> than current consumption <pause dur="0.4"/> right <pause dur="2.1"/> fine <pause dur="1.3"/> so <pause dur="0.4"/><kinesic desc="writes on board" iterated="y" dur="2"/> lambda at time T <pause dur="0.7"/> we've already talked about thanks to # <pause dur="0.3"/> <gap reason="name" extent="1 word"/> <pause dur="0.8"/> measures the <pause dur="1.1"/> additional value to you <pause dur="0.3"/> of an extra unit of income <pause dur="0.3"/> at time T <pause dur="0.6"/> right <pause dur="1.9"/><kinesic desc="writes on board" iterated="y" dur="17"/> so this is <pause dur="1.4"/> value <pause dur="1.5"/> to you <pause dur="2.6"/> of <pause dur="0.8"/> extra <pause dur="1.1"/> income <pause dur="2.0"/> at <pause dur="1.3"/> time <pause dur="0.7"/> little-T <pause dur="2.7"/> but <pause dur="2.2"/> that's not actually what you're interested in <pause dur="1.1"/> because <pause dur="1.7"/> you're now in period zero <pause dur="0.3"/> trying to decide <pause dur="0.3"/> what you're going to do for the whole of your life <pause dur="0.5"/> and lambda at time T measures <pause dur="1.1"/> how you feel about an extra unit of income <pause dur="0.5"/> at time <pause dur="0.8"/> little-T <pause dur="0.4"/> given you're currently at time zero <pause dur="3.0"/> so <pause dur="0.9"/> you might ask me the question <pause dur="0.7"/> you might <pause dur="1.1"/> if i gave <pause dur="0.2"/> how about my feeling about this extra unit of income at time <pause dur="0.2"/> T <pause dur="0.2"/> rather than at time little-zero <pause dur="1.7"/><kinesic desc="writes on board" iterated="y" dur="9"/> well we define this thing called M at <pause dur="0.3"/> T <pause dur="0.5"/> to be <pause dur="1.8"/> E-to-the-power-R-T times lambda-T <pause dur="2.1"/> and what does that do <pause dur="0.6"/> well it scales up <pause dur="1.4"/> the the value of 
to you of income at time T <pause dur="0.3"/> by the discount factor <pause dur="0.2"/> E-to-the-R-T <pause dur="1.0"/> so it <pause dur="1.1"/> undoes the effect of the discounting <pause dur="1.8"/> and <pause dur="0.9"/> says to you <pause dur="1.8"/> oh let's let's <pause dur="0.4"/> let's step back <pause dur="1.5"/> what it does <pause dur="0.8"/> is says to you <pause dur="0.3"/> okay <pause dur="0.8"/> an extra unit of income to you <pause dur="0.3"/> at time T <pause dur="0.7"/> is worth <kinesic desc="indicates point on board" iterated="n"/> this much to you at time zero <pause dur="1.0"/> to work out how much it's worth to you at time T <pause dur="0.4"/> we have to scale it up again <pause dur="0.8"/> 'cause when you get to time T <pause dur="0.4"/> the <pause dur="0.7"/> time T now is the present and so you have to undo the effect of the discounting <pause dur="1.4"/> so <kinesic desc="writes on board" iterated="y" dur="12"/> this thing here is called the <pause dur="0.2"/> the current <pause dur="1.7"/> marginal <pause dur="2.3"/> valuation <pause dur="6.4"/> now this thing here is going to be jolly useful for us in solving economic <pause dur="0.7"/> optimal control problems <pause dur="0.5"/> because <pause dur="1.2"/><event desc="wipes board" iterated="y" dur="9"/> in economic optimal control problems <pause dur="1.3"/> we often find that we have discounting <pause dur="1.4"/> so it's often <pause dur="1.3"/><kinesic desc="writes on board" iterated="y" dur="42"/> okay <pause dur="0.7"/> it's often <pause dur="1.2"/> useful <pause dur="2.1"/> to <pause dur="0.5"/> eliminate <pause dur="2.3"/> the costate variable <pause dur="1.7"/> lambda at time T <pause dur="1.0"/> and <pause dur="1.0"/> replace it with <pause dur="3.8"/> M at time T <pause dur="0.5"/> <unclear>the</unclear> current <pause dur="1.7"/> marginal <pause dur="3.1"/> valuation <pause dur="3.2"/> so it's time for an example of that <pause dur="4.5"/> and we'll do that next time 
</u></body>
</text></TEI.2>