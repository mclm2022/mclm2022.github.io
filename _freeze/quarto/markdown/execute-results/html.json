{
  "hash": "b0ece7e0c8fa1c8ca768dc4ca389e292",
  "result": {
    "markdown": "---\ntitle: \"Markdown and inline code\"\nauthor: \"Mariana Montes\"\nsubtitle: \"Fifth assignment\"\nnumber-sections: true\n---\n\n\nThe goal of this assignment is to practice markdown formatting and inline code in Quarto.\n\n# Instructions\n\n1. Create a branch for the assignment, e.g. `markdown`. You will work here and only move your changes to `main` if and when you want to submit.\n\n1. Create a Quarto document (don't forget to remove its content!).\n\n1. Write a coherent text that makes use of *italics*, **bold**, `verbatim`, inline code and and bullet points as indicated in @sec-task. The prompt is to describe a file you will read from an URL, as indicated in @sec-data.\n\n1. Render your Quarto document into the output of your choice (word, html, pdf...).\n\n1. Stage and commit all the relevant files (see [Cheatsheet](../git/cheatsheet.qmd#daily-workflow) if you don't remember how).\n\n1. Merge the changes into your `main` branch (see [Cheatsheet](../git/cheatsheet.qmd#work-with-branches)).\n\n1. Push the changes to the remote.\n\n1. Send me an e-mail so I check if it went ok.\n\n# Concretely...\n\nYour Quarto report should be a description of a dataset: you will load the dataset and summarize some variables with a table and with a plot as shown in @sec-data. Remember to use cross-references to point to them!\n\n## Data {#sec-data}\n\nYou will start your Quarto file with a hidden chunk (`include: false`) in which you load {tidyverse} and {kableExtra} and open the [\"gonna-going to\" file](https://raw.githubusercontent.com/mclm2022/mclm2022.github.io/main/slides/gonna_goingto.tsv).\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: setup\n#| message: false\nlibrary(tidyverse)\nlibrary(kableExtra)\noptions(digits = 3) # to print up to 3 digits\nurl <- \"https://raw.githubusercontent.com/mclm2022/mclm2022.github.io/main/slides/gonna_goingto.tsv\"\ngt <- read_tsv(url, show_col_types = FALSE) %>% \n  mutate(variant = fct_relevel(variant, \"gonna\"), register = fct_relevel(register, \"informal\"))\n```\n````\n:::\n\n\nThe output of `gt` should look something like this (but don't print it in Quarto!):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 100 × 7\n   variant comp_length register variant_num source    fit1    fit2\n   <fct>         <dbl> <fct>          <dbl> <chr>    <dbl>   <dbl>\n 1 gonna          6.72 formal             0 q      0.00791 0.0496 \n 2 gonna          5.06 informal           0 x      0.348   0.137  \n 3 gonna          5.28 informal           0 z      0.233   0.0814 \n 4 gonna          4.84 informal           0 i      0.480   0.221  \n 5 gonna          5.74 informal           0 m      0.0881  0.0260 \n 6 gonna          3.68 informal           0 f      0.946   0.861  \n 7 gonna          5.15 informal           0 j      0.297   0.111  \n 8 gonna          6.22 informal           0 p      0.0274  0.00727\n 9 gonna          6.60 informal           0 p      0.0107  0.00269\n10 gonna          6.19 formal             0 c      0.0294  0.174  \n# … with 90 more rows\n```\n:::\n:::\n\n\nThe columns `fit1` and `fit2` show the predicted values of the logistic regression model with only `comp_length` and with `comp_length` and `register` as predictors, respectively. You can use this data to obtain the Concordance Index \"C\" (notice you will need to install the {Hmisc} package):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"Hmisc\") # if not installed yet\nHmisc::somers2(gt$fit2, gt$variant_num)[[\"C\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.984\n```\n:::\n:::\n\n\nOther than describing the dataset itself, you will summarize the data in two ways: a contingency table between the `variant` and `register` columns and a boxplot that combines `variant`, `register` and `comp_length`. The code for both is given below. Feel free to edit them to fit your aesthetic preferences, if you want. In both cases, you may use `echo: false` to hide the code.\n\n::: {.panel-tabset}\n\n### Table\n\n\n::: {#tbl-contingency .cell tbl-cap='Contingency table between `variant` and `register` variables.'}\n\n````{.cell-code}\n```{{r}}\n#| label: tbl-contingency\n#| tbl-cap: Contingency table between `variant` and `register` variables.\ncont_table <- table(gt$variant, gt$register)\ncont_table %>% kbl() %>% \n  kable_paper()\n```\n````\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-paper\" style='font-family: \"Arial Narrow\", arial, helvetica, sans-serif; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:right;\"> informal </th>\n   <th style=\"text-align:right;\"> formal </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> gonna </td>\n   <td style=\"text-align:right;\"> 43 </td>\n   <td style=\"text-align:right;\"> 7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> going_to </td>\n   <td style=\"text-align:right;\"> 15 </td>\n   <td style=\"text-align:right;\"> 35 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### Plot\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: fig-boxplot\n#| fig-cap: Distribution of complement length across variants, distinguished by register.\ngt %>% ggplot(aes(x = variant, y = comp_length, fill = register)) +\n  geom_boxplot() +\n  scale_fill_manual(values = c(\"coral\", \"darkolivegreen3\")) +\n  labs(x = \"Variant\", y = \"Complement length\", fill = \"Register\") +\n  theme_minimal(base_size = 15) +\n  theme(legend.position = \"top\")\n```\n````\n\n::: {.cell-output-display}\n![Distribution of complement length across variants, distinguished by register.](markdown_files/figure-html/fig-boxplot-1.png){#fig-boxplot width=672}\n:::\n:::\n\n\n:::\n\n## Tasks {#sec-task}\n\nThe main task is to describe the dataset (particularly the table and the plot) in your own words. More concretely,\n\n- Use `verbatim` to refer to variables (or column names), e.g. \"@tbl-contingency cross-tabulates the `variant` and `register` variables\".\n\n- Use *italics* to refer to values of variables, e.g. \"The instances of *gonna* are clearly biased towards the *informal* `register`\".\n\n- Use **bold** to highlight concepts you will define (you may choose which), e.g. \"@fig-boxplot is a **boxplot**, which represents the distribution of a numerical variable...\".\n\n- Use bullet points to list the names of your columns like so:\n\n    + `variant`, with values *gonna* and *going_to*, indicating the choice between one expression or the other;\n\n    + `comp_length`, or complement length, with a minimum value of 1...\n    \nWhen possible, use inline code to render values of your variables into your text. This will avoid typos and, if your dataset changes, the printed output will adapt. See @sec-inline for examples.\n\n## Tips {#sec-tips}\n\n### Markdown\n\nSee [documentation](https://quarto.org/docs/authoring/markdown-basics.html).\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n```md\n`verbatim`\n\n*italics* or _italics_\n\n**bold** or __bold__\n\n- Bullet one\n\n- Bullet two\n\n    + Sub bullet point\n    \n- Bullet three\n```\n\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"40%\"}\n<br>\n`verbatim`\n\n*italics* or _italics_\n\n**bold** or __bold__\n\n- Bullet one\n\n- Bullet two\n\n    + Sub bullet point\n    \n- Bullet three\n:::\n\n::::\n\n### Inline code {#sec-inline}\n\nWhile `verbatim` is rendered by surrounding text with backticks, R output can be included inline by preceding the text with \"r \". Here are some examples of how you could use it in the description of your dataset.\n\n```md\nThe dataset has `r nrow(gt)` observations and `r length(gt)` variables.\n```\n\nThe dataset has 100 observations and 7 variables.\n\n```md\nThere are `r cont_table[\"gonna\", \"informal\"]` instances of *gonna* in the *informal*\n`register`.\n```\n\nThere are 43 instances of *gonna* in the *informal* `register`.\n\n```md\nThe values of `comp_length`, which represents the **complement length**,\nspan from `r min(gt$comp_length)` to `r max(gt$comp_length)`\nwith a median of `r median(comp_length)`.\n```\n\nThe values of `comp_length`, which represents the **complement length**, spans from 1 to 6.969 with a median of 4.85.\n\n```md\nThe values of `variant` are *`r levels(gt$variant)[[1]]`* and\n*`r levels(gt$variant)[[2]]`*.\n```\nThe values of `variant` are *gonna* and *going_to*.\n\n```md\nThe Concordance index C for the logistic regression model with `variant` as outcome\nand `comp_length` and `register` as main effects\nis `r Hmisc::somers2(gt$fit2, gt$variant_num)[[\"C\"]]`.\n```\nThe Concordance index C for the logistic regression model with `variant` as outcome and `comp_length` and `register` as main effects is 0.984.\n\n# Git workflow {#sec-git}\n\n```bash\ngit status # check that you're on main, nothing to commit...\ngit branch markdown\ngit checkout markdown\n# work on your .qmd file, render\ngit status # check everything is fine\ngit add .\ngit commit -m \"practice with markdown and inline code\"\n# you may also make several commits as you add a figure, a table...\ngit checkout main\ngit status # check everything is fine. New files should not be there\ngit merge markdown\n# Now the .qmd file, the rendered file and the help files should be present\ngit push\n# and send me a message!\n```\n",
    "supporting": [
      "markdown_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}