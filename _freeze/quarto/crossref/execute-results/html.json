{
  "hash": "86016dd8813be69782dbce2da38321a1",
  "result": {
    "markdown": "---\ntitle: \"Cross-references\"\nauthor: \"Mariana Montes\"\nsubtitle: \"Second assignment\"\nnumber-sections: true\n---\n\n\nThe goal of this assignment is to practice creating tables and plots in Quarto and including cross-references. [Cross-references](https://quarto.org/docs/authoring/cross-references.html) are important in scholarly writing, as they allow you to refer to elements (figures, tables and sections) that are in a different location in your document. In Quarto outputs, they also become hyperlinks the location: by clicking on the reference, you are taken to the appropriate figure/table/section.\n\nFor this assignment you can keep working on the same file from the [First assignment](../git/assignment.qmd).\n\n# Instructions\n\n1. Create a branch for the assignment, e.g. `cross-ref`. You will work here and only move your changes to `main` if and when you want to submit.\n\n1. Create a Quarto document or work on the one from the previous assignment. Include a figure and/or a table **with a caption** and write text that introduces/explains it and uses a cross-reference to point to it.\n\n1. You may also try to add a cross-reference to a section.\n\n1. Render your Quarto document into the output of your choice (word, html, pdf...).\n\n1. Stage and commit all the relevant files (see [Cheatsheet](../git/cheatsheet.qmd#daily-workflow) if you don't remember how).\n\n1. Merge the changes into your `main` branch (see [Cheatsheet](../git/cheatsheet.qmd#work-with-branches)).\n\n1. Push the changes to the remote.\n\n1. Send me an e-mail so I check if it went ok.\n\n# Tips for the Quarto document\n\n## Invisible chunks\n\nYou may add the `include: false` option to your setup chunk to hide both the code and the result from your final output. For example, I would start my reports with the following chunk:\n\n\n\n\n\n\n```r\n#| label: setup\n#| include: false\nlibrary(tidyverse)\nlibrary(mclm) # not necessary for THIS notebook, but usually yes\nlibrary(kableExtra)\ndataset <- tibble(\n  name = c(\"Fulano\", \"Mengano\", \"John Doe\", \"Someone\"),\n  age = c(35, 23, 56, 12),\n  ear_type = c(\"Pointy\", \"Rounded\", \"Rounded\", \"Pointy\")\n)\n```\n\n## Chunks with output\n\nFor tables and figures, you can either copy code from the slides from previous lessons or do something from scratch as shown below. It doesn't have to be serious, it just has to be done properly.\n\nYou can either add `echo: false` to your chunks (which will not be shown in the examples below) or add the following lines to the metadata YAML at the top of your .qmd file to make it the default in the whole document:\n\n```yml\nexecute:\n  echo: false\n```\n\n:::: {.panel-tabset}\n\n### Table example\n\n@tbl-tblex is referenced with `@tbl-tblex` in the text. Remember that the label of the figure must start with \"tbl\", the caption must be set with \"tbl-cap\" and the caption location may be set with \"tbl-cap-location\". A margin caption will only be shown in the margins in HTML output if the viewport is wide enough (for responsiveness). By default, the margin location of a table is at the top.\n\n\n::: {#tbl-tblex .cell .tbl-cap-location-margin tbl-cap='Age and ear shape of people invented for this exercise.'}\n\n````{.cell-code}\n```{{r}}\n#| label: tbl-tblex\n#| tbl-cap: Age and ear shape of people invented for this exercise.\n#| tbl-cap-location: margin\nkbl(dataset, col.names = c(\"Name\", \"Age\", \"Ear shape\")) %>% \n  kable_paper()\n```\n````\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-paper\" style='font-family: \"Arial Narrow\", arial, helvetica, sans-serif; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Name </th>\n   <th style=\"text-align:right;\"> Age </th>\n   <th style=\"text-align:left;\"> Ear shape </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Fulano </td>\n   <td style=\"text-align:right;\"> 35 </td>\n   <td style=\"text-align:left;\"> Pointy </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Mengano </td>\n   <td style=\"text-align:right;\"> 23 </td>\n   <td style=\"text-align:left;\"> Rounded </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> John Doe </td>\n   <td style=\"text-align:right;\"> 56 </td>\n   <td style=\"text-align:left;\"> Rounded </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Someone </td>\n   <td style=\"text-align:right;\"> 12 </td>\n   <td style=\"text-align:left;\"> Pointy </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n  \n### Figure example\n\n@fig-figex is referenced with `@fig-figex` in the text. Remember that the label of the figure must start with \"fig\", the caption must be set with \"fig-cap\" and the caption location may be set with \"fig-cap-location\". By default the caption location of a figure is at the bottom.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: fig-figex\n#| fig-cap: A lollipop chart showing the ages and ear shapes of people invented for this exercise.\nggplot(dataset, aes(x = age, y = name)) +\n  geom_segment(aes(xend = 0, yend = name), color = \"gray\") +\n  geom_point(aes(color = ear_type), size = 3) +\n  labs(x = \"Age\", y = \"\", color = \"Ear shape\") +\n  theme_classic(base_size = 15) +\n  theme(legend.position = \"top\")\n```\n````\n\n::: {.cell-output-display}\n![A lollipop chart showing the ages and ear shapes of people invented for this exercise.](crossref_files/figure-html/fig-figex-1.png){#fig-figex width=672}\n:::\n:::\n\n::: {.callout-tip collapse=true}\n#### {ggplot2} syntax\n\n{ggplot2} uses what is called a Grammar of Graphics: layers of instructions on each other. In @fig-figex, this is what each line does:\n\n`ggplot(dataset, aes(x = age, y = name))`\n\n:   Creates a `ggplot` object, which is plotted when printing. It assigns it a dataset to read data from and *aesthethics*. Aesthetics are mappings between columns of the dataset (variables) and markers or characteristics of the plot.\n\n:   The aesthetics we are assigning are `x` and `y`, i.e. the horizontal and vertical axis respectively. The data in the `age` column of `dataset` will be mapped to the horizontal axis, while the data in the `name` column of the `dataset` (even if it's categorical) will be mapped to the vertical axis.\n\n:   Aesthetics can be assigned either in this stage or in a `geom_` layer. Aesthetics assigned inside the `ggplot()` call will be used by all the following `geom_` layers unless overriden.\n\n`geom_segment(aes(xend = 0, yend = name), color = \"gray\")`\n\n:   Add a segment **geom**etry, i.e. one line per observation. The aesthetics needed to draw a line are `x` and `xend` (the horizontal coordinates for each end of the line) and `y` and `yend` (the vertical coordinates for each end of the line). In other words, we will draw a line between `(x, y)` and `(xend, yend)`.\n\n:   For these segments, we will use the same `x` and `y` values assigned in the `ggplot()` call, which are *inherited* automatically. But we will also need to add the values for `xend` and `yend`. `xend` is a constant, 0: we want all the segments to start from $x=0$ and end at the value of `age`. `yend` is equal to `y`: we want horizontal lines that have the same value at `y` and `yend`, i.e. the value of `name`.\n\n:   Outside the mapping argument with the `aes()` call, we can also assign other constants, such as the same color for all elements. These are independent of the dataset. (`xend` could also have been defined here.) In this case we indicate that the segments must be gray.\n\n`geom_point(aes(color = ear_type), size = 3)`\n\n:   Add a point geometry, i.e. one point per observation. We inherit the aesthetics from `ggplot()` but not those of `geom_segment()` (which would be meaningless anyways).\n\n:   `color` is defined within the `aes()` call because we want to map the value of `ear_type` to the colors. `size` is defined outside, as a constant for all points.\n\n:   If `geom_segment()` was called after `geom_point()`, they would be drawn *on top* of the points and seen in the overlapping bit.\n\n`labs(x = \"Age\", y = \"\", color = \"Ear shape\")`\n\n:   Set the label of the `x` axis to \"Age\", remove the label of the `y` axis, and set the title of the color legend to \"Ear shape\".\n\n`theme_classic(base_size = 15)`\n\n:   Set a bunch of default properties for a nice theme. We also ask for the base font size to be of 15 points.\n\n`theme(legend.position = \"top\")`\n\n:   Further refine the theme by stating that the legend should be on top of the plot.\n\nTo better understand the effect of each later, I invite you to run the code adding one line at a time and see how the plot changes.\n\n:::\n\n### Section example\n\n@sec-git is referenced as `@sec-git`. In order to be able to reference it, you should add ` {#sec-git}` after the heading that needs referencing. Remember also to add the following `number-sections: true` to your metadata YAML.\n\n::::\n\n# Git workflow {#sec-git}\n\n```bash\ngit status # check that you're on main, nothing to commit...\ngit branch cross-ref\ngit checkout cross-ref\n# work on your .qmd file, render\ngit status # check everything is fine\ngit add .\ngit commit -m \"practice with cross-references\"\n# you may also make several commits as you add a figure, a table...\ngit checkout main\ngit status # check everything is fine. New files should not be there\ngit merge cross-ref\n# Now the .qmd file, the rendered file and the help files should be present\ngit push\n# and send me a message!\n```\n",
    "supporting": [
      "crossref_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}