{
  "hash": "eb6c18e970a6adacc43fe2bb4c214d61",
  "result": {
    "markdown": "---\ntitle: \"Reading and exploring a corpus\"\nsubtitle: \"Methods of Corpus Linguistics (class 2)\"\nauthor: \"Mariana Montes\"\nformat:\n  revealjs:\n    preview-links: auto\n    multiplex: true\n---\n\n\n\n\n\n## Outline\n\n\n- Initialize project \n- Add corpus \n- Explore corpus \n- Describe corpus \n\n\n# Initialize project\n\n## Steps\n\n1. Create an R project, check on the \"git repository\" checkbox and commit changes\n\n  + Alternatively, run `usethis::use_git()`\n  \n2. Add remote on the terminal following the instructions on GitHub (see next slide).\n\n::: callout-warning\n### In the future\n\nFor future projects, the workflow may be different; check [Happy Git With R](https://happygitwithr.com/usage-intro.html) for a guide.\n:::\n\n::: {.footer}\nInitialize project\n:::\n\n## Connect repository to GitHub\n\nThis only needs to be done once at the beginning.\n\n```default\ngit remote add origin <url>\ngit branch -M main\ngit push -u origin main\n```\n\n::: callout-note\n`<url>` is the url of your repository.\n:::\n\n::: {.footer}\nInitialize project\n:::\n\n## Notes\n\n- If you make changes on the remote, use `git pull` before making changes in the local repo.\n\n- Avoid .RData with `Tools > Global Options > General > Workspace/History`\n\n- You can work with Git(Hub) on the Git tab of RStudio or on the Git Bash Terminal\n\n::: {.footer}\nInitialize project\n:::\n\n# Add corpus\n\n## Git branch\n\nOptionally, you can start \"new work\" on a new branch and then merge it to `main`.\n\n```default\ngit branch explore-corpus\ngit checkout explore-corpus\n```\n::: callout-tip\nI will **only** look at what you push to the `main` branch.\n:::\n\n::: {.footer}\nAdd corpus\n:::\n\n## Add a folder with a corpus\n\nDownload the corpora from Toledo (`mcl.zip` file with various corpora) and\ncopy/move the `brown` folder to your project. There are different options.\n\n::: {.panel-tabset}\n\n### Top level\n\nTo be accessed with `here::here(\"brown\")`.\n\n```\nproject\n|_brown\n|_project.Rproj\n|_.gitignore\n```\n\n### Corpus/corpora folder\n\nTo be accessed with `here::here(\"corpus\", \"brown\")`.\n\n```\nproject\n|_corpus\n| \\_brown\n|_project.Rproj\n|_.gitignore\n```\n\n### Data folder\n\nTo be accessed with `here::here(\"data\", \"corpus\", \"brown\")`.\n\n```\nproject\n|_data\n| \\_corpus\n|   \\_brown\n|_project.Rproj\n|_.gitignore\n```\n:::\n\n::: {.footer}\nAdd corpus\n:::\n\n## .gitignore\n\nWe don't want to track the corpus on git (because of size and **licenses**).\n\n1. Open `.gitignore`.\n\n2. Add a line for the folder to ignore, e.g. `/brown/`.\n\n(Check `git status`!)\n\n::: {.footer}\nAdd corpus\n:::\n\n# Explore corpus\n\n## Create new R script\n\n- Easier to run the code again and to share it.\n\n- Load packages first.\n\n- Do not change your working directory; use `here()` or reliable relative paths.\n\n::: callout-tip\nYou can add comments to explain what you did and even hierarchical sections!\n:::\n\n::: {.footer}\nExplore corpus\n:::\n\n## Start of the script\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages ----\nlibrary(here)\nlibrary(tidyverse)\nlibrary(mclm)\n\n# Load data ----\npath_to_corpus <- here(\"studies\", \"_corpora\", \"brown\") # adapt\n\n## List filenames ----\nbrown_fnames <- get_fnames(path_to_corpus)\n```\n:::\n\n\n::: {.footer}\nExplore corpus\n:::\n\n## Inspect objects\n\nIn the console:\n\n- `path_to_corpus` = `print(path_to_corpus)`\n- `print(brown_fnames, hide_path = path_to_corpus)`\n- `explore(brown_fnames)`\n- `drop_re(brown_fnames, \"/c[a-z]\")`\n\n::: {.footer}\nExplore corpus\n:::\n\n## Create a frequency list\n\nCreate it on the script, inspect in the console (or from the script).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrown_fnames <- brown_fnames %>% \n  keep_re(\"/c[a-z]\")\nflist <- freqlist(brown_fnames, re_token_splitter = re(\"\\\\s+\"))\n```\n:::\n\n\n::: callout-tip\nCheck out the \"freqlists\" tutorial of {mclmtutorials} (`learnr::run_tutorial(\"freqlists\", \"mclmtutorials\")`) to learn why we need the `re_token_splitter` argument.\n:::\n\n::: {.footer}\nExplore corpus\n:::\n\n## Explore the frequency list\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(flist, n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFrequency list (types in list: 63517, tokens in list: 1162192)\nrank   type abs_freq nrm_freq\n---- ------ -------- --------\n   1 the/at    69013  593.818\n   2    ,/,    58153  500.373\n   3    ./.    48812  419.999\n...\n```\n:::\n\n```{.r .cell-code}\nn_tokens(flist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1162192\n```\n:::\n\n```{.r .cell-code}\nn_types(flist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 63517\n```\n:::\n:::\n\n\n::: callout-tip\nCheck out [the documentation](https://masterclm.github.io/mclm/reference/freqlist.html#value)\n:::\n\n::: {.footer}\nExplore corpus\n:::\n\n## Plot frequencies I {auto-animate=TRUE}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_tibble(flist) %>% \n  ggplot(aes(x = rank, y = abs_freq)) +\n  geom_point(alpha = 0.3) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](init_files/figure-revealjs/zipf-1.png){width=960}\n:::\n:::\n\n\n::: {.footer}\nExplore corpus\n:::\n\n## Plot frequencies II {auto-animate=TRUE}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_tibble(flist) %>% \n  ggplot(aes(x = rank, y = abs_freq)) +\n  geom_point(alpha = 0.3) +\n  ggrepel::geom_text_repel(data = as_tibble(keep_bool(flist, flist > 10000)),\n                  aes(label = type), xlim = c(0, NA)) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](init_files/figure-revealjs/zipf2-1.png){width=960}\n:::\n:::\n\n\n::: {.footer}\nExplore corpus\n:::\n\n\n## Plot frequencies III\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"|1|2-7|8|9|10|11\"}\nas_tibble(flist) %>%\n  mutate(freq_range = case_when(\n    abs_freq == 1 ~ \"1\",\n    abs_freq <= 5 ~ \"2-5\",\n    abs_freq <= 100 ~ \"6-100\",\n    abs_freq <= 1000 ~ \"101-1000\",\n    TRUE ~ \"> 1000\"\n  ) %>% fct_reorder(abs_freq)) %>% \n  ggplot(aes(x = freq_range)) +\n  geom_bar() +\n  geom_label(stat = \"count\", aes(label = ..count..))\n```\n\n::: {.cell-output-display}\n![](init_files/figure-revealjs/freq-cats-1.png){width=960}\n:::\n:::\n\n\n::: {.footer}\nExplore corpus\n:::\n\n# Describe corpus\n\n## Read the documentation\n\nIt might be in a README file, online, as a paper...\n\n- What time period(s) is/are covered?\n\n- What genre(s)? Language varieties?\n\n- Written? Transcripts of oral texts?\n\n- Is it a monitor corpus?\n\n::: callout-warning\n### Licenses\n\nCheck also the permissions you have as user of the corpus.\n:::\n\n::: {.footer}\nDescribe corpus\n:::\n\n## Quarto document\n\n- Create basic Quarto document\n\n- Set meta data on the YAML choosing output\n\n- Optional: render to check it's working\n\n- Remove current text and write your own\n\n::: {.footer}\nDescribe corpus\n:::\n\n## Code in a Quarto document\n\n- Inline code surrounded by backticks and starting with \"r\".\n\n- Code chunks: to run arbitrary code, create tables and plots, print glosses with {glossr}.\n\n- Read external scripts with `source()` or with the `code` or `file` chunk options.\n\n::: {.footer}\nDescribe corpus\n:::\n\n## Inline code\n\n### Markdown\n\n```markdown\nThe Brown corpus used in this project has `r prettyNum(n_tokens(flist))` tokens\nand `r n_types(flist)` types,\ngiving us a type-token ratio of `r round(n_types(flist)/n_tokens(flist), 2)`.\n```\n\n<br>\n\n### Output\n\nThe Brown corpus used in this project has 1162192 tokens and 63517 types,\ngiving us a type-token ratio of 0.05.\n\n::: {.footer}\nDescribe corpus\n:::\n\n## Code chunks {auto-animate=TRUE}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl <- (flist) %>% head(5)\ntbl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFrequency list (types in list: 5, tokens in list: 239548)\n<total number of tokens: 1162192>\nrank orig_rank   type abs_freq nrm_freq\n---- --------- ------ -------- --------\n   1         1 the/at    69013  593.818\n   2         2    ,/,    58153  500.373\n   3         3    ./.    48812  419.999\n   4         4  of/in    35028  301.396\n   5         5 and/cc    28542  245.588\n```\n:::\n:::\n\n\n::: {.footer}\nDescribe corpus\n:::\n\n## Tables with `knitr::kable()` {auto-animate=TRUE}\n\n\n::: {#tbl-kable .cell tbl-cap='Top 5 types and their frequencies.'}\n\n```{.r .cell-code}\nlibrary(knitr)\ntbl <- (flist) %>% head(5)\ntbl %>% \n  kable()\n```\n\n::: {.cell-output-display}\n| rank| orig_rank|type   | abs_freq| nrm_freq|\n|----:|---------:|:------|--------:|--------:|\n|    1|         1|the/at |    69013| 593.8175|\n|    2|         2|,/,    |    58153| 500.3734|\n|    3|         3|./.    |    48812| 419.9994|\n|    4|         4|of/in  |    35028| 301.3960|\n|    5|         5|and/cc |    28542| 245.5876|\n:::\n:::\n\n\n::: {.footer}\nDescribe corpus\n:::\n\n<!-- ## Tables with `flextable::flextable()` {auto-animate=TRUE} -->\n\n<!-- ```{r} -->\n<!-- #| label: tbl-flextable -->\n<!-- #| echo: true -->\n<!-- #| tbl-cap: Top 5 types and their frequencies. -->\n<!-- library(flextable) -->\n<!-- as_tibble(flist) %>%  -->\n<!--   head(5) %>%  -->\n<!--   flextable() %>%  -->\n<!--   theme_alafoli() -->\n<!-- ``` -->\n\n\n<!-- ::: {.footer} -->\n<!-- Describe corpus -->\n<!-- ::: -->\n\n## Tables with `kableExtra::kbl()` {auto-animate=TRUE}\n\n\n::: {#tbl-kableExtra .cell tbl-cap='Top 5 types and their frequencies.'}\n\n```{.r .cell-code}\nlibrary(kableExtra)\ntbl <- (flist) %>% head(5)\ntbl %>% \n  kbl() %>% \n  kable_paper()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-paper\" style='font-family: \"Arial Narrow\", arial, helvetica, sans-serif; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> rank </th>\n   <th style=\"text-align:right;\"> orig_rank </th>\n   <th style=\"text-align:left;\"> type </th>\n   <th style=\"text-align:right;\"> abs_freq </th>\n   <th style=\"text-align:right;\"> nrm_freq </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\"> the/at </td>\n   <td style=\"text-align:right;\"> 69013 </td>\n   <td style=\"text-align:right;\"> 593.8175 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:left;\"> ,/, </td>\n   <td style=\"text-align:right;\"> 58153 </td>\n   <td style=\"text-align:right;\"> 500.3734 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:left;\"> ./. </td>\n   <td style=\"text-align:right;\"> 48812 </td>\n   <td style=\"text-align:right;\"> 419.9994 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:left;\"> of/in </td>\n   <td style=\"text-align:right;\"> 35028 </td>\n   <td style=\"text-align:right;\"> 301.3960 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:left;\"> and/cc </td>\n   <td style=\"text-align:right;\"> 28542 </td>\n   <td style=\"text-align:right;\"> 245.5876 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n::: {.footer}\nDescribe corpus\n:::\n\n## Import code\n\nIn both cases, you might want to use the `include: false` chunk option to avoid printing neither the code itself or its output.\n\n::: {.panel-tabset}\n\n### The code\n\n\n```md    \n# script.R    \nx <- \"New variable called x\"    \nprint(x)    \n```\n\n\n### `source()`\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: setup-chunk\nsource(here::here(\"R\", \"script.R\"), local = knitr::knit_global())\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"New variable called x\"\n```\n:::\n:::\n\n\n### `file`\n\n\n::: {.cell file='C:/Users/u0118974/repos/github/mclm2022/methods-in-corpus-linguistics/R/script.R'}\n\n````{.cell-code}\n```{{r}}\n#| label: file\n#| file: !expr here::here(\"R\", \"script.R\")\nx <- \"New variable called x\"\nprint(x)\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"New variable called x\"\n```\n:::\n:::\n\n\n### `code=readLines`\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: code\n#| code: !expr readLines(here::here(\"R\", \"script.R\"))\nx <- \"New variable called x\"\nprint(x)\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"New variable called x\"\n```\n:::\n:::\n\n\n:::\n\n::: {.footer}\nDescribe corpus\n:::\n\n## Stage, commit, push\n\n- Commit whenever you reach a \"stage\".\n- Push at most once a day.\n\n```default\ngit status\ngit add .\ngit commit -m \"my first quarto document\"\ngit push\n```\n\n::: callout-warning\n### Branches and remotes\n\nThe first time you try to push from a local branch you may get an error! Just\nfollow the instructions, don't panic :)\n\n:::\n\n## From a branch\n\nIf you were in your `explore-corpus` branch and want to bring changes to main\n\n::: {.panel-tabset}\n\n### `git merge`\n\n`main` is now totally up-to-speed.\n\n```default\ngit checkout main\ngit merge explore-corpus\n```\n\n### `git checkout`\n\nGet only selected folders/files.\n\n```default\ngit checkout main\ngit checkout explore-corpus script.R\n```\n:::\n\n::: {.footer}\nDescribe corpus\n:::\n\n# Next: Contingency tables\n\n",
    "supporting": [
      "init_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ],
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}