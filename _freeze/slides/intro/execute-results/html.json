{
  "hash": "fef12afa0993c2065879389892512b77",
  "result": {
    "markdown": "---\ntitle: \"Methods in Corpus Linguistics\"\nsubtitle: \"Introduction to the course\"\nauthor: \"Mariana Montes\"\nformat:\n  revealjs:\n    preview-links: auto\n---\n\n\n\n\n\n## Outline\n\n\n- Topics \n- Software to install \n- Format of the classes \n- Exam and submission procedure \n\n\n# Topics\n\n## Corpus linguistics\n\n- What is a corpus?\n\n- What is corpus linguistics?\n\n- Collocations and keywords analysis\n\n- Comparison of variants and of varieties\n\n::: {.footer}\nTopics\n:::\n\n## Statistical techniques\n\n- Association measures\n\n### Comparison of variants\n\n- Logistic regression\n\n- Conditional inference trees\n\n### Comparison of varieties\n\n- Correspondence Analysis\n\n- Factor Analysis\n\n::: {.footer}\nTopics\n:::\n\n# Software to install\n\n## Programs\n\n- [R](https://cran.r-project.org/) -- the programming language\n\n- [RStudio](https://www.rstudio.com/products/rstudio/) -- IDE for R\n\n- [Quarto](https://quarto.org/docs/get-started/) -- publishing system\n\n- Tinytex (I will show you how)\n\n- (Optionally) [Git](https://git-scm.com/)\n\n::: {.callout-note}\n### Costs?\n\nEverything open source and free!\n:::\n\n::: {.footer}\nSoftware to install\n:::\n\n## R packages from CRAN\n\nAfter installing R, you should install the following R packages.\n\n- **tidyverse** (a group of data manipulation packages)\n- **ca** (for Correspondence Analysis)\n- **here** (for file paths)\n- **xml2** (to work with XML files)\n- **easystats** (for reporting stats)^[You might also want to run `easystats::install_suggested()` to install additional useful packages]\n- **ggeffects** (to plot regression effects)\n\n::: {.footer}\nSoftware to install\n:::\n\n## R development packages\n\n- **mclm** (\"masterclm/mclm\")\n- **mclmtutorials** (\"masterclm/mclmtutorials\")\n- **learnr** (\"rstudio/learnr\")\n- **gradethis** (\"rstudio/gradethis\")\n- (Optionally) **glossr** (\"montesmariana/glossr\") if you want to write interlinear glosses\n\n::: {.footer}\nSoftware to install\n:::\n\n## How to install R packages\n\n- From CRAN: with `install.packages(\"package\")`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"tidyverse\", \"ca\", \"here\", \"xml2\", \"easystats\", \"ggeffects\"))\n```\n:::\n\n\n- Development packages: with `remotes::install_github(\"user/repo\")`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(remotes)\ninstall_github(\"masterclm/mclm\")\ninstall_github(\"masterclm/mclmtutorials\")\ninstall_github(\"rstudio/learnr\")\ninstall_github(\"rstudio/gradethis\")\n```\n:::\n\n\n::: aside\nRun this code in the R console.\n:::\n\n::: {.footer}\nSoftware to install\n:::\n\n# Format of the classes\n\n## Technical setup\n\n- Basics of R, RStudio, R projects\n\n- Basics of Quarto (to write your paper!)\n\n- Basics of Git (option to submit the paper)\n\n::: {.footer}\nFormat of the classes\n:::\n\n## Theoretical classes\n\nLectures on the different topics, with slides\n\n- Corpus linguistics\n\n- Association measures\n\n- Logistic regression and conditional trees\n\n- Correspondence Analysis\n\n- Factor Analysis\n\n::: {.footer}\nFormat of the classes\n:::\n\n## Case studies\n\nGoing through analyses, with notebooks and code you can copy-paste\n\n- Collocation and keyword analysis\n\n- Alternation studies: analysis of variants\n\n- Lectometry: analysis of varieties\n\n- Register analysis: analysis of varieties\n\n::: {.footer}\nFormat of the classes\n:::\n\n# Exam and submission procedure\n\n## Exam format\n\n- Paper with analysis\n\n  + Choose a corpus and at least one technique\n  \n  + Define a research question that the technique can address\n  \n  + Small literature review\n  \n  + Perform analysis\n  \n- Full project to be submitted: R code, paper written in Quarto, bibliography\n\n::: {.footer}\nExam and submission procedure\n:::\n\n## Submission procedure\n\n### Option 1: Toledo\n\n- Turn your project folder into a zip file (excluding corpus) and submit via Toledo Assignments\n\n### Option 2: Git & GitHub\n\n- Follow the instructions to set up the Git repository and push your project\n\n- Optional intermediate assignments to get used to the tasks, Git and GitHub\n\n::: {.footer}\nExam and submission procedure\n:::\n\n## Git submission - setup\n\n- Create an R project with a git repository\n\n- Stage and commit your changes, either in the Git tab or by typing `git add .` followed by `git commit -m \"some message\"` in the Git Bash Terminal\n\n- Add a remote to the repository by typing `git remote add origin <url>` in the Git Bash Terminal\n\n- Set the main branch to \"main\" with `git branch -M main` if it isn't already.\n\n- Upload your changes with `git push -u origin main`\n\n::: {.footer}\nExam and submission procedure\n:::\n\n## Git submission - later\n\n- Stage your changes with `git add .` (`.` to stage _everything_)\n\n- Take a snapshot of your work with `git commit -m \"some message\"`\n\n- When you want to submit, run `git push`\n\n::: {.footer}\nExam and submission procedure\n:::\n\n# Basics of R\n\n## Some things to show {visibility=\"hidden\"}\n\n- R Studio\n\n- How R works\n\n- learnr tutorials\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}