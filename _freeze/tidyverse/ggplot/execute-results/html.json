{
  "hash": "2ece185a183e6b128d73a0d129f20e37",
  "result": {
    "markdown": "---\ntitle: \"The Grammar of Graphics\"\nauthor: \"Mariana Montes\"\nsubtitle: \"Fourth assignment\"\nnumber-sections: true\n---\n\n\nThe goal of this assignment is to gain some familiarity with the Grammar of Graphics, i.e. the principles behind {ggplot2} syntax.\nHadley Wickham's [article](https://byrneslab.net/classes/biol607/readings/wickham_layered-grammar.pdf) is a good start if you're interested in that philosophy, and you can also check [the ggplot2 book](https://ggplot2-book.org/index.html).\n\nIt is not necessary to know all the functions in order to create graphics with {ggplot2} ---I think the most important points are to understand the logic of the layers and to learn how to look up what you need. It's ok if you need to google how to draw a barplot, how to change the position of the legend, or what the available colors and color palettes are... but you have to get comfortable looking things up, learning about package extensions and combining the functions into the plot you are thinking of.\n\n# Instructions\n\n1. Create a branch for the assignment, e.g. `ggplot`. You will work here and only move your changes to `main` if and when you want to submit.\n\n1. Create a Quarto file.\n\n    1. Copy the code in the \"setup\" tab below to set up a dataset for plotting. This chunk must be hidden, with the option `include: false`.\n    \n    1. Draw the plot in the \"plot\" tab below, but not in one go. Create a separate chunk per layer, as exemplified in @sec-ex. Each chunk should be cross-referenceable.\n    \n    1. Using cross-references, describe the output of each new layer of the plot. What has changed and why? Again, see @sec-ex for an example.\n    \n1. Render the Quarto file, move the changes to `main`, push and let me know.\n\n::: callout-warning\n### Cross-references\n\nDon't forget to add both a label and a caption to the figure!\n:::\n\n## Code to copy\n\n::: {.panel-tabset}\n\n### Setup\n\nCopy the following code as is in an invisible chunk in your Quarto file (use `include: false` in the options).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nset.seed(2022)\nrows <- 20\ncake_eaten <- tibble(\n  hunger_level = sample(1:100, rows, replace = TRUE),\n  cake_eaten = sample(1:100, rows, replace = TRUE)/100,\n  cake_flavor = sample(rep_len(c(\"vanilla\", \"chocolate\"), rows))\n  )\n```\n:::\n\n\n::: callout-tip\nIf you *want*, you can also write a small section in your file in which you print the table and/or describe what it represents! (If you don't remember what I said you can make it up, as long as it kind of makes sense.)\n\nDescribing the table can be a good opportunity to practice inline code, e.g. `` `r nrow(cake_eaten)` `` to print the number of rows in the dataframe, or using other functions such as `length(cake_eaten)` to get the number of columns.\n:::\n\n### Plot\n\nThis is the final code for the plot you have to build, and the final output should look like the plot under the code. In total you should have at least 10 different plots: one for each of the layers!\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\nggplot(cake_eaten, aes(x = cake_eaten, y = hunger_level)) +\n  geom_point(aes(color = cake_flavor), size = 3) +\n  geom_hline(yintercept = 80, linetype = 2) +\n  geom_line(aes(group = cake_flavor), color = \"gray40\", linetype = 4) +\n  scale_color_manual(values = c(\"coral3\", \"darkcyan\")) +\n  scale_x_continuous(labels = scales::label_percent()) +\n  labs(x = \"Percentage of cake eaten\", y = \"Hunger level\", color = \"Cake flavor\") +\n  annotate(\"text\", x = 0, y = 80, label = \"Would eat anything\",\n           vjust = -0.6, hjust = 0, family = \"mono\") +\n  theme_light(base_size = 20) +\n  theme(legend.position = \"top\", text = element_text(family = \"serif\"))\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/plot-1.png){width=672}\n:::\n:::\n\n::: callout-important\n### Order of the layers\n\nThe order of the layers is not crucial to the output. If the `geom_line()` layers goes before the `geom_point()` layer, it will be drawn *before* it (and therefore *under* it), but otherwise, it doesn't change much in which order you do them. That said, it can be useful to respect a certain logical order --it's just not *necessary* and sometimes it doesn't make a difference. It won't throw an error.\n\nFor the assignment, please keep the order, but you're welcome to explore and experiment what happens if you change it.\n:::\n\n:::\n\n\n# Example {#sec-ex}\n\n::: callout-tip\n## About the example\n\nThe text below exemplifies a bit of what the Quarto file should look like. The chunk options should **not** be visible (I made them visible here to help you) but the code should be accessible.\n\nIf you would like to hide the code and make it available on demand, use `code-fold: true`, either as an option in the chunks you want to apply it to or in the metadata YAML of the Quarto file.\n:::\n\n@fig-ggplot shows the output of just calling `ggplot()` with the dataset and `x` and `y` aesthetics: a basic, gray canvas with default axis labels and range of values.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: fig-ggplot\n#| fig-cap: \"Output of the basic `ggplot()` call.\"\ng <- ggplot(cake_eaten, aes(x = cake_eaten, y = hunger_level))\ng\n```\n````\n\n::: {.cell-output-display}\n![Output of the basic `ggplot()` call.](ggplot_files/figure-html/fig-ggplot-1.png){#fig-ggplot width=672}\n:::\n:::\n\n\n@fig-point shows the output of adding only a point geometry with `geom_point()`, additionally mapping the variable of cake flavor to the color of the points and setting the size of all points to 3.[In this case I also added `code-fold: true` so that code is only seen on demand.]{.aside} A legend with default label is automatically added.\n\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"true\"}\n```{{r}}\n#| label: fig-point\n#| fig-cap: Output after adding the points geometry.\n#| code-fold: true\ng <- g + geom_point(aes(color = cake_flavor), size = 3)\ng\n```\n````\n\n::: {.cell-output-display}\n![Output after adding the points geometry.](ggplot_files/figure-html/fig-point-1.png){#fig-point width=672}\n:::\n:::\n\n\n[After a few more plots...]\n\n\n\n\n\n@fig-theme-light adds a complete theme called `theme_light()`, which...\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: fig-theme-light\n#| fig-cap: Output after adding a \"light\" theme.\ng <- g + theme_light(base_size = 20)\ng\n```\n````\n\n::: {.cell-output-display}\n![Output after adding a \"light\" theme.](ggplot_files/figure-html/fig-theme-light-1.png){#fig-theme-light width=672}\n:::\n:::\n\n\n# Git workflow {#sec-git}\n\n```bash\ngit status # check that you're on main, nothing to commit...\ngit branch ggplot\ngit checkout ggplot\n# work on your .qmd file, render\ngit status # check everything is fine\ngit add .\ngit commit -m \"practice with ggplot\"\n# you may also make several commits as you add a figure, a table...\ngit checkout main\ngit status # check everything is fine. New files should not be there\ngit merge ggplot\n# Now the .qmd file, the rendered file and the help files should be present\ngit push\n# and send me a message!\n```\n",
    "supporting": [
      "ggplot_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}