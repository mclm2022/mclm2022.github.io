{
  "hash": "a78cb5ae4133420fad5e0b8fbbbb25a8",
  "result": {
    "markdown": "---\ntitle: \"Tibble manipulation\"\nauthor: \"Mariana Montes\"\nsubtitle: \"Third assignment\"\nnumber-sections: true\n---\n\n\nThe goal of this assignment is to practice working with tables using tidyverse. [Tidyverse](https://www.tidyverse.org/) is a collection of R packages for data wrangling and visualization (among other things). A great resource to learn how to use it is [*R for data Science*](https://r4ds.had.co.nz/).\n\nFor this assignment I ask that you create both a script to manipulate the table and then a Quarto file to print and cross-reference the table (combining what you learned in the [second assignment](../quarto/crossref.qmd)).\n\n# Instructions\n\n1. Create a branch for the assignment, e.g. `tibble`. You will work here and only move your changes to `main` if and when you want to submit.\n\n1. Create an R script where you will insert the necessary code to do the following:\n\n    i) Load the appropriate libraries (tidyverse and mclm).\n\n    i) Read the brown corpus.\n    \n    i) Create an association scores table of the collocations of a word of your choosing.\n    \n    i) Save the file.\n    \n        a. OPTION A: Manipulate the table as done in class: turn it into a tibble with `as_tibble()`, modify columns, select some columns to show, filter the rows, rearrange the order. Then write it to a file with `write_tsv()`.\n        \n        b. OPTION B: Save the association scores object to a file with `write_assoc()`.\n  \n1. Create a Quarto report where you will only load the {mclm} and {kableExtra} packages.\n\n    i. Read the association scores object:^[If you use `read_tsv()`, the `show_col_types = FALSE` argument will hide the printed output with the description of the column types, e.g. `my_data <- read_tsv(\"filepath\", show_col_types = FALSE)`.]\n\n        a. OPTION A: If you wrote it with `write_tsv()`, use `read_tsv()`.\n        \n        b. OPTION B: If you wrote it with `write_assoc()`, you can either use `read_tsv()` or `read_assoc()` followed by `as_tibble()`.\n        \n    i. If you hadn't manipulated the table, this is the time to do so.\n    \n    i. Print the table with {kableExtra}, editing it as well if you so wish. Don't forget to add a caption!\n    \n    i. Include some text cross-referencing the table and maybe commenting on the result.\n\n::: callout-tip\n## Render Latex in table header\n\nIf you try to use Latex in a table, for example `r\"($\\chi^2$)\"` to obtain $\\chi^2$, you might notice that it prints well in the interactive session but not in the rendered HTML document. This is (I think) a bug somewhere in the rendering of tables, but there is a workaround:\n\nSomewhere in your Quarto document, paste the following text (as normal text, not as R code):\n\n```default\n<script type=\"text/x-mathjax-config\">MathJax.Hub.Config({tex2jax: {inlineMath: [[\"$\",\"$\"]]}})</script>\n<script async src=\"https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>\n```\n\nThis will activate parsing of Latex inside the HTML tables.\n\nIn PDF output instead you just have to add the option `escape = FALSE` to your `kbl()` call. Notice, however, that you should not have unescaped Latex characters in other elements of the table! (No underscores, for example).\n\n:::\n\n# Tips\n\n## Manipulating the table\n\n- Use `mutate()` to change the values of a column.\n\n- Use `filter()` to subset the rows based on values in the columns. You can also use the `slice_` family of functions to subset with other criteria:\n\n  + `slice_head(n = 3)` to select the first three rows; `slice_tail(n = 5)` to select the last five rows.\n  \n  + `slice_sample(n = 10)` to select ten random rows, `slice_sample(prop = 0.5)` to select a random 50% of the rows.\n  \n- Use `select()` to subset the columns. You can also use `rename()` to rename columns without removing the rest.\n\n- Use `arrange()` to sort the tibble based on the values in a column.\n\n::: {.callout-tip collapse=true}\n### Example\n\nAn example is the code below, which starts with an `assoc` object (product of `assoc_scores()`) and ends with a tibble with a selection of rows and columns.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\nsubsetted <- hot_assoc %>% \n  as_tibble() %>% \n  filter(PMI > 1, G_signed >= 5, endsWith(type, \"nn\")) %>% \n  select(type, freq = a, PMI, ends_with(\"signed\"), OR) %>% \n  mutate(\n    log_OR = log(OR),\n    type = str_remove(type, \"/nn\")\n  )\n```\n:::\n\n\n- In line 2 we use `as_tibble()` to turn the `assoc` object into a `tibble` to manipulate with {tidyverse} functions.\n\n- In line 3 we use `filter()` to subset the rows that have PMI larger than 1, G_signed larger than or equal to 5, and a type ending with \"nn\", i.e. nouns.\n\n- In line 4 we use `select()` to subset the columns `type`, `a`, `PMI` and `OR` as well as those ending in \"signed\" and at the same time rename `a` to \"freq\". \n\n- In lines 5 through 8 we use `mutate()` to create a new column `log_OR` that contains the logarithm of the `OR` column, and we modify the `type` column to remove the \"/nn\" ending from its elements.\n\n- In line 1 we assign the whole operation, initially applied to `hot_assoc`, to a variable called `subsetted`.\n\nEach operation of the pipe acts on the output of the operation before it.\n:::\n\n## Association scores\n\n- Use `assoc_scores()` after `surf_cooc()` to create an association scores object.\n\n- Use `write_assoc(scores_object, filename)` to save the object from your R script.\n\n- Use `scores_object <- read_assoc(filename)` to read the object in the Quarto file.\n\n## KableExtra\n\nCheck out the documentation for [HTML](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html) or [PDF](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_pdf.pdf) output to learn about {kableExtra} features.\n\n# Git workflow {#sec-git}\n\n```bash\ngit status # check that you're on main, nothing to commit...\ngit branch tibble\ngit checkout tibble\n# work on your .qmd file, render\ngit status # check everything is fine\ngit add .\ngit commit -m \"practice with tibbles\"\n# you may also make several commits as you add a figure, a table...\ngit checkout main\ngit status # check everything is fine. New files should not be there\ngit merge tibble\n# Now the .qmd file, the rendered file and the help files should be present\ngit push\n# and send me a message!\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}