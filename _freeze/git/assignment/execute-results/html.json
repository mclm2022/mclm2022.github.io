{
  "hash": "0281eefe2e78caf7033a94990d5881ae",
  "result": {
    "markdown": "---\ntitle: \"Corpus description\"\nauthor: \"Mariana Montes\"\nsubtitle: \"First (optional) assignment\"\n---\n\n\nThe goal of this assignment is to help solidify what we learned on the second class of the course and get some idea of how to describe a corpus.\n\nI am assuming that you have an R project connected to your Github repository; if you don't, please look at the [Git Cheatsheet](cheatsheet.qmd). I also assume you have downloaded the corpora from Toledo (the \"mcl.zip\" file).\n\n# Instructions\n\n1. Create a branch for the assignment, e.g. `explore-corpus`. You will work here and only move your changes to `main` if and when you want to submit.\n\n2. Copy or move the \"brown\" folder to your project folder, in the location of your preference (see [Slides](../slides/init.qmd#add-a-folder-with-a-corpus)).\n\n3. Add the \"brown\" folder to \".gitignore\" so it is not tracked by Git (see [Slides](../slides/init.qmd#gitignore)).\n\n4. Create a Quarto document. In this document, write a description of the corpus. You may use information from the \"README\" and \"CONTENTS\" file within the \"brown\" corpus as well as Wikipedia information or from other sources.\n\n5. Render your Quarto document into the output of your choice (word, html, pdf...).\n\n6. Stage and commit all the relevant files (see [Cheatsheet](cheatsheet.qmd#daily-workflow) if you don't remember how).\n\n7. Merge the changes into your `main` branch (see [Cheatsheet](cheatsheet.qmd#work-with-branches)).\n\n8. Push the changes to the remote.\n\n9. Send me an e-mail so I check if it went ok.\n\n# Tips for the Quarto document\n\nIt's ok if your file just has text for now. You could also create an R script with the code used [in the lecture slides](../slides/init.qmd) and interlace code with your text.\n\n::: {.panel-tabset}\n  \n## Code in a chunk\n\nInside your .qmd file, you can insert the following chunk:\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: chunk\n#| output: false\n#| warning: false\nlibrary(here)\nlibrary(tidyverse)\nlibrary(mclm)\n\npath_to_corpus <- here(\"studies\", \"_corpora\", \"brown\") # adapt\nbrown_fnames <- get_fnames(path_to_corpus) %>% \n  keep_re(\"/c[a-z]\")\nflist <- freqlist(brown_fnames, re_token_splitter = re(\"\\\\s+\"))\n```\n````\n:::\n\n\n## Code in a separate script\n\nYou could create a script, e.g. \"script.R\", where you put all the code:\n\n```r\n# script.R\n# Load packages ----\nlibrary(here)\nlibrary(tidyverse)\nlibrary(mclm)\n\n# Load data ----\npath_to_corpus <- here(\"studies\", \"_corpora\", \"brown\") # adapt\n\n## List filenames ----\nbrown_fnames <- get_fnames(path_to_corpus) %>% \n  keep_re(\"/c[a-z]\")\nflist <- freqlist(brown_fnames, re_token_splitter = re(\"\\\\s+\"))\n```\n\nAnd then, in your .qmd file, you call the code with one of the options in the [slides](../slides/init.qmd#import-code), e.g.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: source\nsource(here::here(\"script.R\"))\n```\n````\n:::\n\n\n:::\n\nThen you can call the `flist` object you created in the following piece of text:\n\n```markdown\nThe Brown corpus used in this project has `r prettyNum(n_tokens(flist))` tokens\nand `r n_types(flist)` types,\ngiving us a type-token ratio of `r round(n_types(flist)/n_tokens(flist), 2)`.\n```\n\nAnd the output should read:\n\n> The Brown corpus used in this project has 1162192 tokens\nand 63517 types,\ngiving us a type-token ratio of 0.05.\n\n\n# Git workflow\n\n```bash\ngit status # check that you're on main, nothing to commit...\ngit branch explore-corpus\ngit checkout explore-corpus\n# copy corpus folder, edit and save .gitignore\n# work on your .qmd file, render\ngit status # check that the right files are unstaged, the corpus does not show up\ngit add .\ngit commit -m \"describe corpus\"\n# you may also run `git push -u origin explore-corpus` if you want to push to your own branch\ngit checkout main\ngit status # check everything is fine. New files should not be there\ngit merge explore-corpus\n# Now the .qmd file and the rendered file should be present\ngit push\n# and send me a message!\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}