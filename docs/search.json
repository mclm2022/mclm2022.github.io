[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Methods of Corpus Linguistics",
    "section": "",
    "text": "Most of the code relies on the {mclm} package."
  },
  {
    "objectID": "slides/intro.html#outline",
    "href": "slides/intro.html#outline",
    "title": "Methods in Corpus Linguistics",
    "section": "Outline",
    "text": "Outline\n\nTopics\nSoftware to install\nFormat of the classes\nExam and submission procedure"
  },
  {
    "objectID": "slides/intro.html#corpus-linguistics",
    "href": "slides/intro.html#corpus-linguistics",
    "title": "Methods in Corpus Linguistics",
    "section": "Corpus linguistics",
    "text": "Corpus linguistics\n\nWhat is a corpus?\nWhat is corpus linguistics?\nCollocations and keywords analysis\nComparison of variants and of varieties\n\n\nTopics"
  },
  {
    "objectID": "slides/intro.html#statistical-techniques",
    "href": "slides/intro.html#statistical-techniques",
    "title": "Methods in Corpus Linguistics",
    "section": "Statistical techniques",
    "text": "Statistical techniques\n\nAssociation measures\n\nComparison of variants\n\nLogistic regression\nConditional inference trees\n\nComparison of varieties\n\nCorrespondence Analysis\nFactor Analysis\n\n\nTopics"
  },
  {
    "objectID": "slides/intro.html#programs",
    "href": "slides/intro.html#programs",
    "title": "Methods in Corpus Linguistics",
    "section": "Programs",
    "text": "Programs\n\nR – the programming language\nRStudio – IDE for R\nQuarto – publishing system\nTinytex (I will show you how)\n(Optionally) Git\n\n\n\n\n\n\n\nCosts?\n\n\nEverything open source and free!\n\n\n\n\nSoftware to install"
  },
  {
    "objectID": "slides/intro.html#r-packages-from-cran",
    "href": "slides/intro.html#r-packages-from-cran",
    "title": "Methods in Corpus Linguistics",
    "section": "R packages from CRAN",
    "text": "R packages from CRAN\nAfter installing R, you should install the following R packages.\n\ntidyverse (a group of data manipulation packages)\nca (for Correspondence Analysis)\nhere (for file paths)\nxml2 (to work with XML files)\neasystats (for reporting stats)1\nggeffects (to plot regression effects)\n\n\nSoftware to install\n\nYou might also want to run easystats::install_suggested() to install additional useful packages"
  },
  {
    "objectID": "slides/intro.html#r-development-packages",
    "href": "slides/intro.html#r-development-packages",
    "title": "Methods in Corpus Linguistics",
    "section": "R development packages",
    "text": "R development packages\n\nmclm (“masterclm/mclm”)\nmclmtutorials (“masterclm/mclmtutorials”)\nlearnr (“rstudio/learnr”)\ngradethis (“rstudio/gradethis”)\n(Optionally) glossr (“montesmariana/glossr”) if you want to write interlinear glosses\n\n\nSoftware to install"
  },
  {
    "objectID": "slides/intro.html#how-to-install-r-packages",
    "href": "slides/intro.html#how-to-install-r-packages",
    "title": "Methods in Corpus Linguistics",
    "section": "How to install R packages",
    "text": "How to install R packages\n\nFrom CRAN: with install.packages(\"package\")\n\n\ninstall.packages(c(\"tidyverse\", \"ca\", \"here\", \"xml2\", \"easystats\", \"ggeffects\"))\n\n\nDevelopment packages: with remotes::install_github(\"user/repo\")\n\n\nlibrary(remotes)\ninstall_github(\"masterclm/mclm\")\ninstall_github(\"masterclm/mclmtutorials\")\ninstall_github(\"rstudio/learnr\")\ninstall_github(\"rstudio/gradethis\")\n\n\n\nSoftware to install\n\n\nRun this code in the R console."
  },
  {
    "objectID": "slides/intro.html#technical-setup",
    "href": "slides/intro.html#technical-setup",
    "title": "Methods in Corpus Linguistics",
    "section": "Technical setup",
    "text": "Technical setup\n\nBasics of R, RStudio, R projects\nBasics of Quarto (to write your paper!)\nBasics of Git (option to submit the paper)\n\n\nFormat of the classes"
  },
  {
    "objectID": "slides/intro.html#theoretical-classes",
    "href": "slides/intro.html#theoretical-classes",
    "title": "Methods in Corpus Linguistics",
    "section": "Theoretical classes",
    "text": "Theoretical classes\nLectures on the different topics, with slides\n\nCorpus linguistics\nAssociation measures\nLogistic regression and conditional trees\nCorrespondence Analysis\nFactor Analysis\n\n\nFormat of the classes"
  },
  {
    "objectID": "slides/intro.html#case-studies",
    "href": "slides/intro.html#case-studies",
    "title": "Methods in Corpus Linguistics",
    "section": "Case studies",
    "text": "Case studies\nGoing through analyses, with notebooks and code you can copy-paste\n\nCollocation and keyword analysis\nAlternation studies: analysis of variants\nLectometry: analysis of varieties\nRegister analysis: analysis of varieties\n\n\nFormat of the classes"
  },
  {
    "objectID": "slides/intro.html#exam-format",
    "href": "slides/intro.html#exam-format",
    "title": "Methods in Corpus Linguistics",
    "section": "Exam format",
    "text": "Exam format\n\nPaper with analysis\n\nChoose a corpus and at least one technique\nDefine a research question that the technique can address\nSmall literature review\nPerform analysis\n\nFull project to be submitted: R code, paper written in Quarto, bibliography\n\n\nExam and submission procedure"
  },
  {
    "objectID": "slides/intro.html#submission-procedure",
    "href": "slides/intro.html#submission-procedure",
    "title": "Methods in Corpus Linguistics",
    "section": "Submission procedure",
    "text": "Submission procedure\nOption 1: Toledo\n\nTurn your project folder into a zip file (excluding corpus) and submit via Toledo Assignments\n\nOption 2: Git & GitHub\n\nFollow the instructions to set up the Git repository and push your project\nOptional intermediate assignments to get used to the tasks, Git and GitHub\n\n\nExam and submission procedure"
  },
  {
    "objectID": "slides/intro.html#git-submission---setup",
    "href": "slides/intro.html#git-submission---setup",
    "title": "Methods in Corpus Linguistics",
    "section": "Git submission - setup",
    "text": "Git submission - setup\n\nCreate an R project with a git repository\nStage and commit your changes, either in the Git tab or by typing git add . followed by git commit -m \"some message\" in the Git Bash Terminal\nAdd a remote to the repository by typing git remote add origin <url> in the Git Bash Terminal\nSet the main branch to “main” with git branch -M main if it isn’t already.\nUpload your changes with git push -u origin main\n\n\nExam and submission procedure"
  },
  {
    "objectID": "slides/intro.html#git-submission---later",
    "href": "slides/intro.html#git-submission---later",
    "title": "Methods in Corpus Linguistics",
    "section": "Git submission - later",
    "text": "Git submission - later\n\nStage your changes with git add . (. to stage everything)\nTake a snapshot of your work with git commit -m \"some message\"\nWhen you want to submit, run git push\n\n\nExam and submission procedure"
  },
  {
    "objectID": "slides/init.html#outline",
    "href": "slides/init.html#outline",
    "title": "Reading and exploring a corpus",
    "section": "Outline",
    "text": "Outline\n\nInitialize project\nAdd corpus\nExplore corpus\nDescribe corpus"
  },
  {
    "objectID": "slides/init.html#steps",
    "href": "slides/init.html#steps",
    "title": "Reading and exploring a corpus",
    "section": "Steps",
    "text": "Steps\n\nCreate an R project, check on the “git repository” checkbox and commit changes\n\n\nAlternatively, run usethis::use_git()\n\n\nAdd remote on the terminal following the instructions on GitHub (see next slide).\n\n\n\n\n\n\n\nIn the future\n\n\nFor future projects, the workflow may be different; check Happy Git With R for a guide.\n\n\n\n\nInitialize project"
  },
  {
    "objectID": "slides/init.html#connect-repository-to-github",
    "href": "slides/init.html#connect-repository-to-github",
    "title": "Reading and exploring a corpus",
    "section": "Connect repository to GitHub",
    "text": "Connect repository to GitHub\nThis only needs to be done once at the beginning.\nmymachine: ~/project-folder (master)\n$ git remote add origin <url>\nmymachine: ~/project-folder (master)\n$ git branch -M main\nmymachine: ~/project-folder (main)\n$ git push -u origin main\n\n\n\n\n\n\nNote\n\n\n<url> is the url of your repository.\n\n\n\n\nInitialize project"
  },
  {
    "objectID": "slides/init.html#notes",
    "href": "slides/init.html#notes",
    "title": "Reading and exploring a corpus",
    "section": "Notes",
    "text": "Notes\n\nIf you make changes on the remote, use git pull before making changes in the local repo.\nAvoid .RData with Tools > Global Options > General > Workspace/History\nYou can work with Git(Hub) on the Git tab of RStudio or on the Git Bash Terminal\n\n\nInitialize project"
  },
  {
    "objectID": "slides/init.html#git-branch",
    "href": "slides/init.html#git-branch",
    "title": "Reading and exploring a corpus",
    "section": "Git branch",
    "text": "Git branch\nOptionally, you can start “new work” on a new branch and then merge it to main.\nmymachine: ~/project-folder (main)\n$ git branch explore-corpus\nmymachine: ~/project-folder (main)\n$ git checkout explore-corpus\nmymachine: ~/project-folder (explore-corpus)\n$ \n\n\n\n\n\n\nTip\n\n\nI will only look at what you push to the main branch.\n\n\n\n\nAdd corpus"
  },
  {
    "objectID": "slides/init.html#add-a-folder-with-a-corpus",
    "href": "slides/init.html#add-a-folder-with-a-corpus",
    "title": "Reading and exploring a corpus",
    "section": "Add a folder with a corpus",
    "text": "Add a folder with a corpus\nDownload the corpora from Toledo (mcl.zip file with various corpora) and copy/move the brown folder to your project. There are different options.\n\nTop levelCorpus/corpora folderData folder\n\n\nTo be accessed with here::here(\"brown\").\nproject\n|_brown\n|_project.Rproj\n|_.gitignore\n\n\nTo be accessed with here::here(\"corpus\", \"brown\").\nproject\n|_corpus\n| \\_brown\n|_project.Rproj\n|_.gitignore\n\n\nTo be accessed with here::here(\"data\", \"corpus\", \"brown\").\nproject\n|_data\n| \\_corpus\n|   \\_brown\n|_project.Rproj\n|_.gitignore\n\n\n\n\nAdd corpus"
  },
  {
    "objectID": "slides/init.html#gitignore",
    "href": "slides/init.html#gitignore",
    "title": "Reading and exploring a corpus",
    "section": ".gitignore",
    "text": ".gitignore\nWe don’t want to track the corpus on git (because of size and licenses).\n\nOpen .gitignore.\nAdd a line for the folder to ignore, e.g. /brown/.\n\n(Check git status!)\n\nAdd corpus"
  },
  {
    "objectID": "slides/init.html#create-new-r-script",
    "href": "slides/init.html#create-new-r-script",
    "title": "Reading and exploring a corpus",
    "section": "Create new R script",
    "text": "Create new R script\n\nEasier to run the code again and to share it.\nLoad packages first.\nDo not change your working directory; use here() or reliable relative paths.\n\n\n\n\n\n\n\nTip\n\n\nYou can add comments to explain what you did and even hierarchical sections!\n\n\n\n\nExplore corpus"
  },
  {
    "objectID": "slides/init.html#start-of-the-script",
    "href": "slides/init.html#start-of-the-script",
    "title": "Reading and exploring a corpus",
    "section": "Start of the script",
    "text": "Start of the script\n\n# Load packages ----\nlibrary(here)\nlibrary(tidyverse)\nlibrary(mclm)\n\n# Load data ----\npath_to_corpus <- here(\"studies\", \"_corpora\", \"brown\") # adapt\n\n## List filenames ----\nbrown_fnames <- get_fnames(path_to_corpus)\n\n\nExplore corpus"
  },
  {
    "objectID": "slides/init.html#inspect-objects",
    "href": "slides/init.html#inspect-objects",
    "title": "Reading and exploring a corpus",
    "section": "Inspect objects",
    "text": "Inspect objects\nIn the console:\n\npath_to_corpus = print(path_to_corpus)\nprint(brown_fnames, hide_path = path_to_corpus)\nexplore(brown_fnames)\ndrop_re(brown_fnames, \"/c[a-z]\")\n\n\nExplore corpus"
  },
  {
    "objectID": "slides/init.html#create-a-frequency-list",
    "href": "slides/init.html#create-a-frequency-list",
    "title": "Reading and exploring a corpus",
    "section": "Create a frequency list",
    "text": "Create a frequency list\nCreate it on the script, inspect in the console (or from the script).\n\nbrown_fnames <- brown_fnames %>% \n  keep_re(\"/c[a-z]\")\nflist <- freqlist(brown_fnames, re_token_splitter = re(\"\\\\s+\"))\n\n\n\n\n\n\n\nTip\n\n\nCheck out the “freqlists” tutorial of {mclmtutorials} (learnr::run_tutorial(\"freqlists\", \"mclmtutorials\")) to learn why we need the re_token_splitter argument.\n\n\n\n\nExplore corpus"
  },
  {
    "objectID": "slides/init.html#explore-the-frequency-list",
    "href": "slides/init.html#explore-the-frequency-list",
    "title": "Reading and exploring a corpus",
    "section": "Explore the frequency list",
    "text": "Explore the frequency list\n\nprint(flist, n = 3)\n\nFrequency list (types in list: 63517, tokens in list: 1162192)\nrank   type abs_freq nrm_freq\n---- ------ -------- --------\n   1 the/at    69013  593.818\n   2    ,/,    58153  500.373\n   3    ./.    48812  419.999\n...\n\nn_tokens(flist)\n\n[1] 1162192\n\nn_types(flist)\n\n[1] 63517\n\n\n::: callout-tip Check out the documentation\n\nExplore corpus"
  },
  {
    "objectID": "slides/init.html#plot-frequencies-i",
    "href": "slides/init.html#plot-frequencies-i",
    "title": "Reading and exploring a corpus",
    "section": "Plot frequencies I",
    "text": "Plot frequencies I\n\nas_tibble(flist) %>% \n  ggplot(aes(x = rank, y = abs_freq)) +\n  geom_point(alpha = 0.3) +\n  theme_minimal()\n\n\n\nExplore corpus"
  },
  {
    "objectID": "slides/init.html#plot-frequencies-ii",
    "href": "slides/init.html#plot-frequencies-ii",
    "title": "Reading and exploring a corpus",
    "section": "Plot frequencies II",
    "text": "Plot frequencies II\n\nas_tibble(flist) %>% \n  ggplot(aes(x = rank, y = abs_freq)) +\n  geom_point(alpha = 0.3) +\n  ggrepel::geom_text_repel(data = as_tibble(keep_bool(flist, flist > 10000)),\n                  aes(label = type), xlim = c(0, NA)) +\n  theme_minimal()\n\n\n\nExplore corpus"
  },
  {
    "objectID": "slides/init.html#plot-frequencies-iii",
    "href": "slides/init.html#plot-frequencies-iii",
    "title": "Reading and exploring a corpus",
    "section": "Plot frequencies III",
    "text": "Plot frequencies III\n\nas_tibble(flist) %>%\n  mutate(freq_range = case_when(\n    abs_freq == 1 ~ \"1\",\n    abs_freq <= 5 ~ \"2-5\",\n    abs_freq <= 100 ~ \"6-100\",\n    abs_freq <= 1000 ~ \"101-1000\",\n    TRUE ~ \"> 1000\"\n  ) %>% fct_reorder(abs_freq)) %>% \n  ggplot(aes(x = freq_range)) +\n  geom_bar() +\n  geom_label(stat = \"count\", aes(label = ..count..))\n\n\n\nExplore corpus"
  },
  {
    "objectID": "slides/init.html#plot-frequencies-iii-output",
    "href": "slides/init.html#plot-frequencies-iii-output",
    "title": "Reading and exploring a corpus",
    "section": "Plot frequencies III",
    "text": "Plot frequencies III"
  },
  {
    "objectID": "slides/init.html#read-the-documentation",
    "href": "slides/init.html#read-the-documentation",
    "title": "Reading and exploring a corpus",
    "section": "Read the documentation",
    "text": "Read the documentation\nIt might be in a README file, online, as a paper…\n\nWhat time period(s) is/are covered?\nWhat genre(s)? Language varieties?\nWritten? Transcripts of oral texts?\nIs it a monitor corpus?\n\n\n\n\n\n\n\nLicenses\n\n\nCheck also the permissions you have as user of the corpus.\n\n\n\n\nDescribe corpus"
  },
  {
    "objectID": "slides/init.html#quarto-document",
    "href": "slides/init.html#quarto-document",
    "title": "Reading and exploring a corpus",
    "section": "Quarto document",
    "text": "Quarto document\n\nCreate basic Quarto document\nSet meta data on the YAML choosing output\nOptional: render to check it’s working\nRemove current text and write your own\n\n\nDescribe corpus"
  },
  {
    "objectID": "slides/init.html#code-in-a-quarto-document",
    "href": "slides/init.html#code-in-a-quarto-document",
    "title": "Reading and exploring a corpus",
    "section": "Code in a Quarto document",
    "text": "Code in a Quarto document\n\nInline code surrounded by backticks and starting with “r”.\nCode chunks: to run arbitrary code, create tables and plots, print glosses with {glossr}.\nRead external scripts with source() or with the code or file chunk options.\n\n\nDescribe corpus"
  },
  {
    "objectID": "slides/init.html#inline-code",
    "href": "slides/init.html#inline-code",
    "title": "Reading and exploring a corpus",
    "section": "Inline code",
    "text": "Inline code\nMarkdown\nThe Brown corpus used in this project has `r prettyNum(n_tokens(flist))` tokens\nand `r n_types(flist)` types,\ngiving us a type-token ratio of `r round(n_types(flist)/n_tokens(flist), 2)`.\n\nOutput\nThe Brown corpus used in this project has 1162192 tokens and 63517 types, giving us a type-token ratio of 0.05.\n\nDescribe corpus"
  },
  {
    "objectID": "slides/init.html#code-chunks",
    "href": "slides/init.html#code-chunks",
    "title": "Reading and exploring a corpus",
    "section": "Code chunks",
    "text": "Code chunks\n\ntbl <- (flist) %>% head(5)\ntbl\n\nFrequency list (types in list: 5, tokens in list: 239548)\n<total number of tokens: 1162192>\nrank orig_rank   type abs_freq nrm_freq\n---- --------- ------ -------- --------\n   1         1 the/at    69013  593.818\n   2         2    ,/,    58153  500.373\n   3         3    ./.    48812  419.999\n   4         4  of/in    35028  301.396\n   5         5 and/cc    28542  245.588\n\n\n\nDescribe corpus"
  },
  {
    "objectID": "slides/init.html#tables-with-knitrkable",
    "href": "slides/init.html#tables-with-knitrkable",
    "title": "Reading and exploring a corpus",
    "section": "Tables with knitr::kable()",
    "text": "Tables with knitr::kable()\n\nlibrary(knitr)\ntbl <- (flist) %>% head(5)\ntbl %>% \n  kable()\n\n\n\nTable 1: Top 5 types and their frequencies.\n\n\nrank\norig_rank\ntype\nabs_freq\nnrm_freq\n\n\n\n\n1\n1\nthe/at\n69013\n593.8175\n\n\n2\n2\n,/,\n58153\n500.3734\n\n\n3\n3\n./.\n48812\n419.9994\n\n\n4\n4\nof/in\n35028\n301.3960\n\n\n5\n5\nand/cc\n28542\n245.5876\n\n\n\n\n\n\n\nDescribe corpus"
  },
  {
    "objectID": "slides/init.html#tables-with-kableextrakbl",
    "href": "slides/init.html#tables-with-kableextrakbl",
    "title": "Reading and exploring a corpus",
    "section": "Tables with kableExtra::kbl()",
    "text": "Tables with kableExtra::kbl()\n\nlibrary(kableExtra)\ntbl <- (flist) %>% head(5)\ntbl %>% \n  kbl() %>% \n  kable_paper()\n\n\n\nTable 2:  Top 5 types and their frequencies. \n \n  \n    rank \n    orig_rank \n    type \n    abs_freq \n    nrm_freq \n  \n \n\n  \n    1 \n    1 \n    the/at \n    69013 \n    593.8175 \n  \n  \n    2 \n    2 \n    ,/, \n    58153 \n    500.3734 \n  \n  \n    3 \n    3 \n    ./. \n    48812 \n    419.9994 \n  \n  \n    4 \n    4 \n    of/in \n    35028 \n    301.3960 \n  \n  \n    5 \n    5 \n    and/cc \n    28542 \n    245.5876 \n  \n\n\n\n\n\n\n\nDescribe corpus"
  },
  {
    "objectID": "slides/init.html#import-code",
    "href": "slides/init.html#import-code",
    "title": "Reading and exploring a corpus",
    "section": "Import code",
    "text": "Import code\nIn both cases, you might want to use the include: false chunk option to avoid printing neither the code itself or its output.\n\nThe codesource()filecode=readLines\n\n\n# script.R    \nx <- \"New variable called x\"    \nprint(x)    \n\n\n\n```{r}\n#| label: setup-chunk\nsource(here::here(\"R\", \"script.R\"), local = knitr::knit_global())\n```\n\n[1] \"New variable called x\"\n\n\n\n\n\n```{r}\n#| label: file\n#| file: !expr here::here(\"R\", \"script.R\")\nx <- \"New variable called x\"\nprint(x)\n```\n\n[1] \"New variable called x\"\n\n\n\n\n\n```{r}\n#| label: code\n#| code: !expr readLines(here::here(\"R\", \"script.R\"))\nx <- \"New variable called x\"\nprint(x)\n```\n\n[1] \"New variable called x\"\n\n\n\n\n\n\nDescribe corpus"
  },
  {
    "objectID": "slides/init.html#stage-commit-push",
    "href": "slides/init.html#stage-commit-push",
    "title": "Reading and exploring a corpus",
    "section": "Stage, commit, push",
    "text": "Stage, commit, push\n\nCommit whenever you reach a “stage”.\nPush at most once a day.\n\nmymachine: ~/project-folder (explore-corpus)\n$ git status\nmymachine: ~/project-folder (explore-corpus)\n$ git add .\nmymachine: ~/project-folder (explore-corpus)\n$ git commit -m \"my first quarto document\"\nmymachine: ~/project-folder (explore-corpus)\n$ git push\n\n\n\n\n\n\nBranches and remotes\n\n\nThe first time you try to push from a local branch you may get an error! Just follow the instructions, don’t panic :)"
  },
  {
    "objectID": "slides/init.html#from-a-branch",
    "href": "slides/init.html#from-a-branch",
    "title": "Reading and exploring a corpus",
    "section": "From a branch",
    "text": "From a branch\nIf you were in your explore-corpus branch and want to bring changes to main\n\ngit mergegit checkout\n\n\nmain is now totally up-to-speed.\nmymachine: ~/project-folder (explore-corpus)\n$ git checkout main\nmymachine: ~/project-folder (main)\n$ git merge explore-corpus\n\n\nGet only selected folders/files.\nmymachine: ~/project-folder (explore-corpus)\n$ git checkout main\nmymachine: ~/project-folder (main)\n$ git checkout explore-corpus script.R\n\n\n\n\nDescribe corpus"
  },
  {
    "objectID": "slides/index.html",
    "href": "slides/index.html",
    "title": "Slides",
    "section": "",
    "text": "Introduction\n\n\n\n\n\nRead corpora"
  }
]